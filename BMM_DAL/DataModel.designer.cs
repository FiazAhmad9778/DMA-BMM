#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BMM_DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BMM2")]
	public partial class DataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttorney(Attorney instance);
    partial void UpdateAttorney(Attorney instance);
    partial void DeleteAttorney(Attorney instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertCommentType(CommentType instance);
    partial void UpdateCommentType(CommentType instance);
    partial void DeleteCommentType(CommentType instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertContactList(ContactList instance);
    partial void UpdateContactList(ContactList instance);
    partial void DeleteContactList(ContactList instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertCPTCode(CPTCode instance);
    partial void UpdateCPTCode(CPTCode instance);
    partial void DeleteCPTCode(CPTCode instance);
    partial void InsertFirm(Firm instance);
    partial void UpdateFirm(Firm instance);
    partial void DeleteFirm(Firm instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertInvoiceAttorney(InvoiceAttorney instance);
    partial void UpdateInvoiceAttorney(InvoiceAttorney instance);
    partial void DeleteInvoiceAttorney(InvoiceAttorney instance);
    partial void InsertInvoiceChangeLog(InvoiceChangeLog instance);
    partial void UpdateInvoiceChangeLog(InvoiceChangeLog instance);
    partial void DeleteInvoiceChangeLog(InvoiceChangeLog instance);
    partial void InsertInvoiceChangeLogType(InvoiceChangeLogType instance);
    partial void UpdateInvoiceChangeLogType(InvoiceChangeLogType instance);
    partial void DeleteInvoiceChangeLogType(InvoiceChangeLogType instance);
    partial void InsertInvoiceContactList(InvoiceContactList instance);
    partial void UpdateInvoiceContactList(InvoiceContactList instance);
    partial void DeleteInvoiceContactList(InvoiceContactList instance);
    partial void InsertInvoiceContact(InvoiceContact instance);
    partial void UpdateInvoiceContact(InvoiceContact instance);
    partial void DeleteInvoiceContact(InvoiceContact instance);
    partial void InsertInvoiceFirm(InvoiceFirm instance);
    partial void UpdateInvoiceFirm(InvoiceFirm instance);
    partial void DeleteInvoiceFirm(InvoiceFirm instance);
    partial void InsertInvoiceInterestCalculationLog(InvoiceInterestCalculationLog instance);
    partial void UpdateInvoiceInterestCalculationLog(InvoiceInterestCalculationLog instance);
    partial void DeleteInvoiceInterestCalculationLog(InvoiceInterestCalculationLog instance);
    partial void InsertInvoicePatient(InvoicePatient instance);
    partial void UpdateInvoicePatient(InvoicePatient instance);
    partial void DeleteInvoicePatient(InvoicePatient instance);
    partial void InsertInvoicePhysician(InvoicePhysician instance);
    partial void UpdateInvoicePhysician(InvoicePhysician instance);
    partial void DeleteInvoicePhysician(InvoicePhysician instance);
    partial void InsertInvoiceProvider(InvoiceProvider instance);
    partial void UpdateInvoiceProvider(InvoiceProvider instance);
    partial void DeleteInvoiceProvider(InvoiceProvider instance);
    partial void InsertInvoiceStatusType(InvoiceStatusType instance);
    partial void UpdateInvoiceStatusType(InvoiceStatusType instance);
    partial void DeleteInvoiceStatusType(InvoiceStatusType instance);
    partial void InsertInvoiceType(InvoiceType instance);
    partial void UpdateInvoiceType(InvoiceType instance);
    partial void DeleteInvoiceType(InvoiceType instance);
    partial void InsertLoanTerm(LoanTerm instance);
    partial void UpdateLoanTerm(LoanTerm instance);
    partial void DeleteLoanTerm(LoanTerm instance);
    partial void InsertMRICostType(MRICostType instance);
    partial void UpdateMRICostType(MRICostType instance);
    partial void DeleteMRICostType(MRICostType instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPatientChangeLog(PatientChangeLog instance);
    partial void UpdatePatientChangeLog(PatientChangeLog instance);
    partial void DeletePatientChangeLog(PatientChangeLog instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertPaymentType(PaymentType instance);
    partial void UpdatePaymentType(PaymentType instance);
    partial void DeletePaymentType(PaymentType instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPhysician(Physician instance);
    partial void UpdatePhysician(Physician instance);
    partial void DeletePhysician(Physician instance);
    partial void InsertProvider(Provider instance);
    partial void UpdateProvider(Provider instance);
    partial void DeleteProvider(Provider instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertSurgery(Surgery instance);
    partial void UpdateSurgery(Surgery instance);
    partial void DeleteSurgery(Surgery instance);
    partial void InsertSurgeryInvoice(SurgeryInvoice instance);
    partial void UpdateSurgeryInvoice(SurgeryInvoice instance);
    partial void DeleteSurgeryInvoice(SurgeryInvoice instance);
    partial void InsertSurgeryInvoice_Provider_CPTCode(SurgeryInvoice_Provider_CPTCode instance);
    partial void UpdateSurgeryInvoice_Provider_CPTCode(SurgeryInvoice_Provider_CPTCode instance);
    partial void DeleteSurgeryInvoice_Provider_CPTCode(SurgeryInvoice_Provider_CPTCode instance);
    partial void InsertSurgeryInvoice_Provider_Payment(SurgeryInvoice_Provider_Payment instance);
    partial void UpdateSurgeryInvoice_Provider_Payment(SurgeryInvoice_Provider_Payment instance);
    partial void DeleteSurgeryInvoice_Provider_Payment(SurgeryInvoice_Provider_Payment instance);
    partial void InsertSurgeryInvoice_Provider_Service(SurgeryInvoice_Provider_Service instance);
    partial void UpdateSurgeryInvoice_Provider_Service(SurgeryInvoice_Provider_Service instance);
    partial void DeleteSurgeryInvoice_Provider_Service(SurgeryInvoice_Provider_Service instance);
    partial void InsertSurgeryInvoice_Provider(SurgeryInvoice_Provider instance);
    partial void UpdateSurgeryInvoice_Provider(SurgeryInvoice_Provider instance);
    partial void DeleteSurgeryInvoice_Provider(SurgeryInvoice_Provider instance);
    partial void InsertSurgeryInvoice_Surgery(SurgeryInvoice_Surgery instance);
    partial void UpdateSurgeryInvoice_Surgery(SurgeryInvoice_Surgery instance);
    partial void DeleteSurgeryInvoice_Surgery(SurgeryInvoice_Surgery instance);
    partial void InsertSurgeryInvoice_SurgeryDate(SurgeryInvoice_SurgeryDate instance);
    partial void UpdateSurgeryInvoice_SurgeryDate(SurgeryInvoice_SurgeryDate instance);
    partial void DeleteSurgeryInvoice_SurgeryDate(SurgeryInvoice_SurgeryDate instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    partial void InsertTestInvoice(TestInvoice instance);
    partial void UpdateTestInvoice(TestInvoice instance);
    partial void DeleteTestInvoice(TestInvoice instance);
    partial void InsertTestInvoice_Test(TestInvoice_Test instance);
    partial void UpdateTestInvoice_Test(TestInvoice_Test instance);
    partial void DeleteTestInvoice_Test(TestInvoice_Test instance);
    partial void InsertTestInvoice_Test_CPTCode(TestInvoice_Test_CPTCode instance);
    partial void UpdateTestInvoice_Test_CPTCode(TestInvoice_Test_CPTCode instance);
    partial void DeleteTestInvoice_Test_CPTCode(TestInvoice_Test_CPTCode instance);
    partial void InsertTestType(TestType instance);
    partial void UpdateTestType(TestType instance);
    partial void DeleteTestType(TestType instance);
    partial void InsertUserPermission(UserPermission instance);
    partial void UpdateUserPermission(UserPermission instance);
    partial void DeleteUserPermission(UserPermission instance);
    partial void InsertAttorneyTerm(AttorneyTerm instance);
    partial void UpdateAttorneyTerm(AttorneyTerm instance);
    partial void DeleteAttorneyTerm(AttorneyTerm instance);
    partial void InsertICDCode(ICDCode instance);
    partial void UpdateICDCode(ICDCode instance);
    partial void DeleteICDCode(ICDCode instance);
    partial void InsertSurgeryInvoice_Surgery_ICDCode(SurgeryInvoice_Surgery_ICDCode instance);
    partial void UpdateSurgeryInvoice_Surgery_ICDCode(SurgeryInvoice_Surgery_ICDCode instance);
    partial void DeleteSurgeryInvoice_Surgery_ICDCode(SurgeryInvoice_Surgery_ICDCode instance);
    #endregion
		
		public DataModelDataContext() : 
				base(global::BMM_DAL.Properties.Settings.Default.BMM2ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attorney> Attorneys
		{
			get
			{
				return this.GetTable<Attorney>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<CommentType> CommentTypes
		{
			get
			{
				return this.GetTable<CommentType>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<ContactList> ContactLists
		{
			get
			{
				return this.GetTable<ContactList>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<CPTCode> CPTCodes
		{
			get
			{
				return this.GetTable<CPTCode>();
			}
		}
		
		public System.Data.Linq.Table<Firm> Firms
		{
			get
			{
				return this.GetTable<Firm>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceAttorney> InvoiceAttorneys
		{
			get
			{
				return this.GetTable<InvoiceAttorney>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceChangeLog> InvoiceChangeLogs
		{
			get
			{
				return this.GetTable<InvoiceChangeLog>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceChangeLogType> InvoiceChangeLogTypes
		{
			get
			{
				return this.GetTable<InvoiceChangeLogType>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceContactList> InvoiceContactLists
		{
			get
			{
				return this.GetTable<InvoiceContactList>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceContact> InvoiceContacts
		{
			get
			{
				return this.GetTable<InvoiceContact>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceFirm> InvoiceFirms
		{
			get
			{
				return this.GetTable<InvoiceFirm>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceInterestCalculationLog> InvoiceInterestCalculationLogs
		{
			get
			{
				return this.GetTable<InvoiceInterestCalculationLog>();
			}
		}
		
		public System.Data.Linq.Table<InvoicePatient> InvoicePatients
		{
			get
			{
				return this.GetTable<InvoicePatient>();
			}
		}
		
		public System.Data.Linq.Table<InvoicePhysician> InvoicePhysicians
		{
			get
			{
				return this.GetTable<InvoicePhysician>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceProvider> InvoiceProviders
		{
			get
			{
				return this.GetTable<InvoiceProvider>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceStatusType> InvoiceStatusTypes
		{
			get
			{
				return this.GetTable<InvoiceStatusType>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceType> InvoiceTypes
		{
			get
			{
				return this.GetTable<InvoiceType>();
			}
		}
		
		public System.Data.Linq.Table<LoanTerm> LoanTerms
		{
			get
			{
				return this.GetTable<LoanTerm>();
			}
		}
		
		public System.Data.Linq.Table<MRICostType> MRICostTypes
		{
			get
			{
				return this.GetTable<MRICostType>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<PatientChangeLog> PatientChangeLogs
		{
			get
			{
				return this.GetTable<PatientChangeLog>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<PaymentType> PaymentTypes
		{
			get
			{
				return this.GetTable<PaymentType>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Physician> Physicians
		{
			get
			{
				return this.GetTable<Physician>();
			}
		}
		
		public System.Data.Linq.Table<Provider> Providers
		{
			get
			{
				return this.GetTable<Provider>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Surgery> Surgeries
		{
			get
			{
				return this.GetTable<Surgery>();
			}
		}
		
		public System.Data.Linq.Table<SurgeryInvoice> SurgeryInvoices
		{
			get
			{
				return this.GetTable<SurgeryInvoice>();
			}
		}
		
		public System.Data.Linq.Table<SurgeryInvoice_Provider_CPTCode> SurgeryInvoice_Provider_CPTCodes
		{
			get
			{
				return this.GetTable<SurgeryInvoice_Provider_CPTCode>();
			}
		}
		
		public System.Data.Linq.Table<SurgeryInvoice_Provider_Payment> SurgeryInvoice_Provider_Payments
		{
			get
			{
				return this.GetTable<SurgeryInvoice_Provider_Payment>();
			}
		}
		
		public System.Data.Linq.Table<SurgeryInvoice_Provider_Service> SurgeryInvoice_Provider_Services
		{
			get
			{
				return this.GetTable<SurgeryInvoice_Provider_Service>();
			}
		}
		
		public System.Data.Linq.Table<SurgeryInvoice_Provider> SurgeryInvoice_Providers
		{
			get
			{
				return this.GetTable<SurgeryInvoice_Provider>();
			}
		}
		
		public System.Data.Linq.Table<SurgeryInvoice_Surgery> SurgeryInvoice_Surgeries
		{
			get
			{
				return this.GetTable<SurgeryInvoice_Surgery>();
			}
		}
		
		public System.Data.Linq.Table<SurgeryInvoice_SurgeryDate> SurgeryInvoice_SurgeryDates
		{
			get
			{
				return this.GetTable<SurgeryInvoice_SurgeryDate>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
		
		public System.Data.Linq.Table<TestInvoice> TestInvoices
		{
			get
			{
				return this.GetTable<TestInvoice>();
			}
		}
		
		public System.Data.Linq.Table<TestInvoice_Test> TestInvoice_Tests
		{
			get
			{
				return this.GetTable<TestInvoice_Test>();
			}
		}
		
		public System.Data.Linq.Table<TestInvoice_Test_CPTCode> TestInvoice_Test_CPTCodes
		{
			get
			{
				return this.GetTable<TestInvoice_Test_CPTCode>();
			}
		}
		
		public System.Data.Linq.Table<TestType> TestTypes
		{
			get
			{
				return this.GetTable<TestType>();
			}
		}
		
		public System.Data.Linq.Table<UserPermission> UserPermissions
		{
			get
			{
				return this.GetTable<UserPermission>();
			}
		}
		
		public System.Data.Linq.Table<AttorneyTerm> AttorneyTerms
		{
			get
			{
				return this.GetTable<AttorneyTerm>();
			}
		}
		
		public System.Data.Linq.Table<ICDCode> ICDCodes
		{
			get
			{
				return this.GetTable<ICDCode>();
			}
		}
		
		public System.Data.Linq.Table<SurgeryInvoice_Surgery_ICDCode> SurgeryInvoice_Surgery_ICDCodes
		{
			get
			{
				return this.GetTable<SurgeryInvoice_Surgery_ICDCode>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.procGetGeneralStatistics")]
		public ISingleResult<procGetGeneralStatisticsResult> procGetGeneralStatistics([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="Date")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyID", DbType="Int")] System.Nullable<int> companyID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, companyID);
			return ((ISingleResult<procGetGeneralStatisticsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.procGetTestInvoiceSummary")]
		public ISingleResult<procGetTestInvoiceSummaryResult> procGetTestInvoiceSummary([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceID", DbType="Int")] System.Nullable<int> invoiceID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), invoiceID);
			return ((ISingleResult<procGetTestInvoiceSummaryResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.procGetSurgeryInvoiceSummary")]
		public ISingleResult<procGetSurgeryInvoiceSummaryResult> procGetSurgeryInvoiceSummary([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceID", DbType="Int")] System.Nullable<int> invoiceID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), invoiceID);
			return ((ISingleResult<procGetSurgeryInvoiceSummaryResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.procSearchInvoice_GetByFirstServiceDate")]
		public ISingleResult<procSearchInvoice_GetByFirstServiceDateResult> procSearchInvoice_GetByFirstServiceDate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SearchDate", DbType="DateTime")] System.Nullable<System.DateTime> searchDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), searchDate);
			return ((ISingleResult<procSearchInvoice_GetByFirstServiceDateResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attorney")]
	public partial class Attorney : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ContactListID;
		
		private System.Nullable<int> _FirmID;
		
		private bool _isActiveStatus;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Notes;
		
		private string _DiscountNotes;
		
		private System.Nullable<decimal> _DepositAmountRequired;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private System.Nullable<int> _Temp_AttorneyID;
		
		private EntitySet<InvoiceAttorney> _InvoiceAttorneys;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ContactList> _ContactList;
		
		private EntityRef<Firm> _Firm;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnContactListIDChanging(int value);
    partial void OnContactListIDChanged();
    partial void OnFirmIDChanging(System.Nullable<int> value);
    partial void OnFirmIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnDiscountNotesChanging(string value);
    partial void OnDiscountNotesChanged();
    partial void OnDepositAmountRequiredChanging(System.Nullable<decimal> value);
    partial void OnDepositAmountRequiredChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnTemp_AttorneyIDChanging(System.Nullable<int> value);
    partial void OnTemp_AttorneyIDChanged();
    #endregion
		
		public Attorney()
		{
			this._InvoiceAttorneys = new EntitySet<InvoiceAttorney>(new Action<InvoiceAttorney>(this.attach_InvoiceAttorneys), new Action<InvoiceAttorney>(this.detach_InvoiceAttorneys));
			this._Company = default(EntityRef<Company>);
			this._ContactList = default(EntityRef<ContactList>);
			this._Firm = default(EntityRef<Firm>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactListID", DbType="Int NOT NULL")]
		public int ContactListID
		{
			get
			{
				return this._ContactListID;
			}
			set
			{
				if ((this._ContactListID != value))
				{
					if (this._ContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactListIDChanging(value);
					this.SendPropertyChanging();
					this._ContactListID = value;
					this.SendPropertyChanged("ContactListID");
					this.OnContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirmID", DbType="Int")]
		public System.Nullable<int> FirmID
		{
			get
			{
				return this._FirmID;
			}
			set
			{
				if ((this._FirmID != value))
				{
					if (this._Firm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFirmIDChanging(value);
					this.SendPropertyChanging();
					this._FirmID = value;
					this.SendPropertyChanged("FirmID");
					this.OnFirmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(100)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountNotes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string DiscountNotes
		{
			get
			{
				return this._DiscountNotes;
			}
			set
			{
				if ((this._DiscountNotes != value))
				{
					this.OnDiscountNotesChanging(value);
					this.SendPropertyChanging();
					this._DiscountNotes = value;
					this.SendPropertyChanged("DiscountNotes");
					this.OnDiscountNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositAmountRequired", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> DepositAmountRequired
		{
			get
			{
				return this._DepositAmountRequired;
			}
			set
			{
				if ((this._DepositAmountRequired != value))
				{
					this.OnDepositAmountRequiredChanging(value);
					this.SendPropertyChanging();
					this._DepositAmountRequired = value;
					this.SendPropertyChanged("DepositAmountRequired");
					this.OnDepositAmountRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp_AttorneyID", DbType="Int")]
		public System.Nullable<int> Temp_AttorneyID
		{
			get
			{
				return this._Temp_AttorneyID;
			}
			set
			{
				if ((this._Temp_AttorneyID != value))
				{
					this.OnTemp_AttorneyIDChanging(value);
					this.SendPropertyChanging();
					this._Temp_AttorneyID = value;
					this.SendPropertyChanged("Temp_AttorneyID");
					this.OnTemp_AttorneyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attorney_InvoiceAttorney", Storage="_InvoiceAttorneys", ThisKey="ID", OtherKey="AttorneyID")]
		public EntitySet<InvoiceAttorney> InvoiceAttorneys
		{
			get
			{
				return this._InvoiceAttorneys;
			}
			set
			{
				this._InvoiceAttorneys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Attorney", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Attorneys.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Attorneys.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Attorney", Storage="_ContactList", ThisKey="ContactListID", OtherKey="ID", IsForeignKey=true)]
		public ContactList ContactList
		{
			get
			{
				return this._ContactList.Entity;
			}
			set
			{
				ContactList previousValue = this._ContactList.Entity;
				if (((previousValue != value) 
							|| (this._ContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactList.Entity = null;
						previousValue.Attorneys.Remove(this);
					}
					this._ContactList.Entity = value;
					if ((value != null))
					{
						value.Attorneys.Add(this);
						this._ContactListID = value.ID;
					}
					else
					{
						this._ContactListID = default(int);
					}
					this.SendPropertyChanged("ContactList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Firm_Attorney", Storage="_Firm", ThisKey="FirmID", OtherKey="ID", IsForeignKey=true)]
		public Firm Firm
		{
			get
			{
				return this._Firm.Entity;
			}
			set
			{
				Firm previousValue = this._Firm.Entity;
				if (((previousValue != value) 
							|| (this._Firm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Firm.Entity = null;
						previousValue.Attorneys.Remove(this);
					}
					this._Firm.Entity = value;
					if ((value != null))
					{
						value.Attorneys.Add(this);
						this._FirmID = value.ID;
					}
					else
					{
						this._FirmID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Firm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Attorney", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Attorneys.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Attorneys.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceAttorneys(InvoiceAttorney entity)
		{
			this.SendPropertyChanging();
			entity.Attorney = this;
		}
		
		private void detach_InvoiceAttorneys(InvoiceAttorney entity)
		{
			this.SendPropertyChanging();
			entity.Attorney = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Position;
		
		private string _Password;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<InvoiceChangeLog> _InvoiceChangeLogs;
		
		private EntitySet<PatientChangeLog> _PatientChangeLogs;
		
		private EntitySet<UserPermission> _UserPermissions;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public User()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._InvoiceChangeLogs = new EntitySet<InvoiceChangeLog>(new Action<InvoiceChangeLog>(this.attach_InvoiceChangeLogs), new Action<InvoiceChangeLog>(this.detach_InvoiceChangeLogs));
			this._PatientChangeLogs = new EntitySet<PatientChangeLog>(new Action<PatientChangeLog>(this.attach_PatientChangeLogs), new Action<PatientChangeLog>(this.detach_PatientChangeLogs));
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(100)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InvoiceChangeLog", Storage="_InvoiceChangeLogs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<InvoiceChangeLog> InvoiceChangeLogs
		{
			get
			{
				return this._InvoiceChangeLogs;
			}
			set
			{
				this._InvoiceChangeLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PatientChangeLog", Storage="_PatientChangeLogs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PatientChangeLog> PatientChangeLogs
		{
			get
			{
				return this._PatientChangeLogs;
			}
			set
			{
				this._PatientChangeLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermission", Storage="_UserPermissions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_User", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_InvoiceChangeLogs(InvoiceChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_InvoiceChangeLogs(InvoiceChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PatientChangeLogs(PatientChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PatientChangeLogs(PatientChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InvoiceID;
		
		private int _UserID;
		
		private int _CommentTypeID;
		
		private string _Text;
		
		private bool _isIncludedOnReports;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<User> _User;
		
		private EntityRef<CommentType> _CommentType;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceIDChanging(int value);
    partial void OnInvoiceIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCommentTypeIDChanging(int value);
    partial void OnCommentTypeIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnisIncludedOnReportsChanging(bool value);
    partial void OnisIncludedOnReportsChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Comment()
		{
			this._User = default(EntityRef<User>);
			this._CommentType = default(EntityRef<CommentType>);
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="Int NOT NULL")]
		public int InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentTypeID", DbType="Int NOT NULL")]
		public int CommentTypeID
		{
			get
			{
				return this._CommentTypeID;
			}
			set
			{
				if ((this._CommentTypeID != value))
				{
					if (this._CommentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CommentTypeID = value;
					this.SendPropertyChanged("CommentTypeID");
					this.OnCommentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isIncludedOnReports", DbType="Bit NOT NULL")]
		public bool isIncludedOnReports
		{
			get
			{
				return this._isIncludedOnReports;
			}
			set
			{
				if ((this._isIncludedOnReports != value))
				{
					this.OnisIncludedOnReportsChanging(value);
					this.SendPropertyChanging();
					this._isIncludedOnReports = value;
					this.SendPropertyChanged("isIncludedOnReports");
					this.OnisIncludedOnReportsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommentType_Comment", Storage="_CommentType", ThisKey="CommentTypeID", OtherKey="ID", IsForeignKey=true)]
		public CommentType CommentType
		{
			get
			{
				return this._CommentType.Entity;
			}
			set
			{
				CommentType previousValue = this._CommentType.Entity;
				if (((previousValue != value) 
							|| (this._CommentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommentType.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._CommentType.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._CommentTypeID = value.ID;
					}
					else
					{
						this._CommentTypeID = default(int);
					}
					this.SendPropertyChanged("CommentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Comment", Storage="_Invoice", ThisKey="InvoiceID", OtherKey="ID", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._InvoiceID = value.ID;
					}
					else
					{
						this._InvoiceID = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommentType")]
	public partial class CommentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Comment> _Comments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public CommentType()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommentType_Comment", Storage="_Comments", ThisKey="ID", OtherKey="CommentTypeID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.CommentType = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.CommentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _LongName;
		
		private string _SiteURL;
		
		private string _ThemeName;
		
		private string _ContactFirstName;
		
		private string _ContactLastName;
		
		private string _ContactTitle;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Address;
		
		private string _CityStateZip;
		
		private string _FederalID;
		
		private string _FromEmailAddress;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Attorney> _Attorneys;
		
		private EntitySet<User> _Users;
		
		private EntitySet<CPTCode> _CPTCodes;
		
		private EntitySet<Firm> _Firms;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<LoanTerm> _LoanTerms;
		
		private EntitySet<Patient> _Patients;
		
		private EntitySet<Physician> _Physicians;
		
		private EntitySet<Provider> _Providers;
		
		private EntitySet<Surgery> _Surgeries;
		
		private EntitySet<Test> _Tests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLongNameChanging(string value);
    partial void OnLongNameChanged();
    partial void OnSiteURLChanging(string value);
    partial void OnSiteURLChanged();
    partial void OnThemeNameChanging(string value);
    partial void OnThemeNameChanged();
    partial void OnContactFirstNameChanging(string value);
    partial void OnContactFirstNameChanged();
    partial void OnContactLastNameChanging(string value);
    partial void OnContactLastNameChanged();
    partial void OnContactTitleChanging(string value);
    partial void OnContactTitleChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityStateZipChanging(string value);
    partial void OnCityStateZipChanged();
    partial void OnFederalIDChanging(string value);
    partial void OnFederalIDChanged();
    partial void OnFromEmailAddressChanging(string value);
    partial void OnFromEmailAddressChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Company()
		{
			this._Attorneys = new EntitySet<Attorney>(new Action<Attorney>(this.attach_Attorneys), new Action<Attorney>(this.detach_Attorneys));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._CPTCodes = new EntitySet<CPTCode>(new Action<CPTCode>(this.attach_CPTCodes), new Action<CPTCode>(this.detach_CPTCodes));
			this._Firms = new EntitySet<Firm>(new Action<Firm>(this.attach_Firms), new Action<Firm>(this.detach_Firms));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._LoanTerms = new EntitySet<LoanTerm>(new Action<LoanTerm>(this.attach_LoanTerms), new Action<LoanTerm>(this.detach_LoanTerms));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Physicians = new EntitySet<Physician>(new Action<Physician>(this.attach_Physicians), new Action<Physician>(this.detach_Physicians));
			this._Providers = new EntitySet<Provider>(new Action<Provider>(this.attach_Providers), new Action<Provider>(this.detach_Providers));
			this._Surgeries = new EntitySet<Surgery>(new Action<Surgery>(this.attach_Surgeries), new Action<Surgery>(this.detach_Surgeries));
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LongName
		{
			get
			{
				return this._LongName;
			}
			set
			{
				if ((this._LongName != value))
				{
					this.OnLongNameChanging(value);
					this.SendPropertyChanging();
					this._LongName = value;
					this.SendPropertyChanged("LongName");
					this.OnLongNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteURL", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SiteURL
		{
			get
			{
				return this._SiteURL;
			}
			set
			{
				if ((this._SiteURL != value))
				{
					this.OnSiteURLChanging(value);
					this.SendPropertyChanging();
					this._SiteURL = value;
					this.SendPropertyChanged("SiteURL");
					this.OnSiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ThemeName
		{
			get
			{
				return this._ThemeName;
			}
			set
			{
				if ((this._ThemeName != value))
				{
					this.OnThemeNameChanging(value);
					this.SendPropertyChanging();
					this._ThemeName = value;
					this.SendPropertyChanged("ThemeName");
					this.OnThemeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactFirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactFirstName
		{
			get
			{
				return this._ContactFirstName;
			}
			set
			{
				if ((this._ContactFirstName != value))
				{
					this.OnContactFirstNameChanging(value);
					this.SendPropertyChanging();
					this._ContactFirstName = value;
					this.SendPropertyChanged("ContactFirstName");
					this.OnContactFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactLastName
		{
			get
			{
				return this._ContactLastName;
			}
			set
			{
				if ((this._ContactLastName != value))
				{
					this.OnContactLastNameChanging(value);
					this.SendPropertyChanging();
					this._ContactLastName = value;
					this.SendPropertyChanged("ContactLastName");
					this.OnContactLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTitle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactTitle
		{
			get
			{
				return this._ContactTitle;
			}
			set
			{
				if ((this._ContactTitle != value))
				{
					this.OnContactTitleChanging(value);
					this.SendPropertyChanging();
					this._ContactTitle = value;
					this.SendPropertyChanged("ContactTitle");
					this.OnContactTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityStateZip", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string CityStateZip
		{
			get
			{
				return this._CityStateZip;
			}
			set
			{
				if ((this._CityStateZip != value))
				{
					this.OnCityStateZipChanging(value);
					this.SendPropertyChanging();
					this._CityStateZip = value;
					this.SendPropertyChanged("CityStateZip");
					this.OnCityStateZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FederalID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FederalID
		{
			get
			{
				return this._FederalID;
			}
			set
			{
				if ((this._FederalID != value))
				{
					this.OnFederalIDChanging(value);
					this.SendPropertyChanging();
					this._FederalID = value;
					this.SendPropertyChanged("FederalID");
					this.OnFederalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromEmailAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FromEmailAddress
		{
			get
			{
				return this._FromEmailAddress;
			}
			set
			{
				if ((this._FromEmailAddress != value))
				{
					this.OnFromEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._FromEmailAddress = value;
					this.SendPropertyChanged("FromEmailAddress");
					this.OnFromEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Attorney", Storage="_Attorneys", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Attorney> Attorneys
		{
			get
			{
				return this._Attorneys;
			}
			set
			{
				this._Attorneys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_User", Storage="_Users", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CPTCode", Storage="_CPTCodes", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<CPTCode> CPTCodes
		{
			get
			{
				return this._CPTCodes;
			}
			set
			{
				this._CPTCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Firm", Storage="_Firms", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Firm> Firms
		{
			get
			{
				return this._Firms;
			}
			set
			{
				this._Firms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_LoanTerm", Storage="_LoanTerms", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<LoanTerm> LoanTerms
		{
			get
			{
				return this._LoanTerms;
			}
			set
			{
				this._LoanTerms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Patient", Storage="_Patients", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Physician", Storage="_Physicians", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Physician> Physicians
		{
			get
			{
				return this._Physicians;
			}
			set
			{
				this._Physicians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Provider", Storage="_Providers", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Provider> Providers
		{
			get
			{
				return this._Providers;
			}
			set
			{
				this._Providers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Surgery", Storage="_Surgeries", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Surgery> Surgeries
		{
			get
			{
				return this._Surgeries;
			}
			set
			{
				this._Surgeries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Test", Storage="_Tests", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attorneys(Attorney entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Attorneys(Attorney entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CPTCodes(CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CPTCodes(CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Firms(Firm entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Firms(Firm entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_LoanTerms(LoanTerm entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_LoanTerms(LoanTerm entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Physicians(Physician entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Physicians(Physician entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Surgeries(Surgery entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Surgeries(Surgery entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactList")]
	public partial class ContactList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private System.Nullable<int> _Temp_AttorneyID;
		
		private System.Nullable<int> _Temp_ProviderID;
		
		private EntitySet<Attorney> _Attorneys;
		
		private EntitySet<Contact> _Contacts;
		
		private EntitySet<Firm> _Firms;
		
		private EntitySet<Physician> _Physicians;
		
		private EntitySet<Provider> _Providers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnTemp_AttorneyIDChanging(System.Nullable<int> value);
    partial void OnTemp_AttorneyIDChanged();
    partial void OnTemp_ProviderIDChanging(System.Nullable<int> value);
    partial void OnTemp_ProviderIDChanged();
    #endregion
		
		public ContactList()
		{
			this._Attorneys = new EntitySet<Attorney>(new Action<Attorney>(this.attach_Attorneys), new Action<Attorney>(this.detach_Attorneys));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._Firms = new EntitySet<Firm>(new Action<Firm>(this.attach_Firms), new Action<Firm>(this.detach_Firms));
			this._Physicians = new EntitySet<Physician>(new Action<Physician>(this.attach_Physicians), new Action<Physician>(this.detach_Physicians));
			this._Providers = new EntitySet<Provider>(new Action<Provider>(this.attach_Providers), new Action<Provider>(this.detach_Providers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp_AttorneyID", DbType="Int")]
		public System.Nullable<int> Temp_AttorneyID
		{
			get
			{
				return this._Temp_AttorneyID;
			}
			set
			{
				if ((this._Temp_AttorneyID != value))
				{
					this.OnTemp_AttorneyIDChanging(value);
					this.SendPropertyChanging();
					this._Temp_AttorneyID = value;
					this.SendPropertyChanged("Temp_AttorneyID");
					this.OnTemp_AttorneyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp_ProviderID", DbType="Int")]
		public System.Nullable<int> Temp_ProviderID
		{
			get
			{
				return this._Temp_ProviderID;
			}
			set
			{
				if ((this._Temp_ProviderID != value))
				{
					this.OnTemp_ProviderIDChanging(value);
					this.SendPropertyChanging();
					this._Temp_ProviderID = value;
					this.SendPropertyChanged("Temp_ProviderID");
					this.OnTemp_ProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Attorney", Storage="_Attorneys", ThisKey="ID", OtherKey="ContactListID")]
		public EntitySet<Attorney> Attorneys
		{
			get
			{
				return this._Attorneys;
			}
			set
			{
				this._Attorneys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Contact", Storage="_Contacts", ThisKey="ID", OtherKey="ContactListID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Firm", Storage="_Firms", ThisKey="ID", OtherKey="ContactListID")]
		public EntitySet<Firm> Firms
		{
			get
			{
				return this._Firms;
			}
			set
			{
				this._Firms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Physician", Storage="_Physicians", ThisKey="ID", OtherKey="ContactListID")]
		public EntitySet<Physician> Physicians
		{
			get
			{
				return this._Physicians;
			}
			set
			{
				this._Physicians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Provider", Storage="_Providers", ThisKey="ID", OtherKey="ContactListID")]
		public EntitySet<Provider> Providers
		{
			get
			{
				return this._Providers;
			}
			set
			{
				this._Providers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attorneys(Attorney entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = this;
		}
		
		private void detach_Attorneys(Attorney entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = null;
		}
		
		private void attach_Firms(Firm entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = this;
		}
		
		private void detach_Firms(Firm entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = null;
		}
		
		private void attach_Physicians(Physician entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = this;
		}
		
		private void detach_Physicians(Physician entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = null;
		}
		
		private void attach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = this;
		}
		
		private void detach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.ContactList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contacts")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ContactListID;
		
		private string _Name;
		
		private string _Position;
		
		private string _Phone;
		
		private string _Email;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<ContactList> _ContactList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactListIDChanging(int value);
    partial void OnContactListIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Contact()
		{
			this._ContactList = default(EntityRef<ContactList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactListID", DbType="Int NOT NULL")]
		public int ContactListID
		{
			get
			{
				return this._ContactListID;
			}
			set
			{
				if ((this._ContactListID != value))
				{
					if (this._ContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactListIDChanging(value);
					this.SendPropertyChanging();
					this._ContactListID = value;
					this.SendPropertyChanged("ContactListID");
					this.OnContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Contact", Storage="_ContactList", ThisKey="ContactListID", OtherKey="ID", IsForeignKey=true)]
		public ContactList ContactList
		{
			get
			{
				return this._ContactList.Entity;
			}
			set
			{
				ContactList previousValue = this._ContactList.Entity;
				if (((previousValue != value) 
							|| (this._ContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactList.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._ContactList.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._ContactListID = value.ID;
					}
					else
					{
						this._ContactListID = default(int);
					}
					this.SendPropertyChanged("ContactList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CPTCodes")]
	public partial class CPTCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private string _Code;
		
		private string _Description;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<SurgeryInvoice_Provider_CPTCode> _SurgeryInvoice_Provider_CPTCodes;
		
		private EntitySet<TestInvoice_Test_CPTCode> _TestInvoice_Test_CPTCodes;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public CPTCode()
		{
			this._SurgeryInvoice_Provider_CPTCodes = new EntitySet<SurgeryInvoice_Provider_CPTCode>(new Action<SurgeryInvoice_Provider_CPTCode>(this.attach_SurgeryInvoice_Provider_CPTCodes), new Action<SurgeryInvoice_Provider_CPTCode>(this.detach_SurgeryInvoice_Provider_CPTCodes));
			this._TestInvoice_Test_CPTCodes = new EntitySet<TestInvoice_Test_CPTCode>(new Action<TestInvoice_Test_CPTCode>(this.attach_TestInvoice_Test_CPTCodes), new Action<TestInvoice_Test_CPTCode>(this.detach_TestInvoice_Test_CPTCodes));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CPTCode_SurgeryInvoice_Provider_CPTCode", Storage="_SurgeryInvoice_Provider_CPTCodes", ThisKey="ID", OtherKey="CPTCodeID")]
		public EntitySet<SurgeryInvoice_Provider_CPTCode> SurgeryInvoice_Provider_CPTCodes
		{
			get
			{
				return this._SurgeryInvoice_Provider_CPTCodes;
			}
			set
			{
				this._SurgeryInvoice_Provider_CPTCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CPTCode_TestInvoice_Test_CPTCode", Storage="_TestInvoice_Test_CPTCodes", ThisKey="ID", OtherKey="CPTCodeID")]
		public EntitySet<TestInvoice_Test_CPTCode> TestInvoice_Test_CPTCodes
		{
			get
			{
				return this._TestInvoice_Test_CPTCodes;
			}
			set
			{
				this._TestInvoice_Test_CPTCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CPTCode", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CPTCodes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CPTCodes.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurgeryInvoice_Provider_CPTCodes(SurgeryInvoice_Provider_CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.CPTCode = this;
		}
		
		private void detach_SurgeryInvoice_Provider_CPTCodes(SurgeryInvoice_Provider_CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.CPTCode = null;
		}
		
		private void attach_TestInvoice_Test_CPTCodes(TestInvoice_Test_CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.CPTCode = this;
		}
		
		private void detach_TestInvoice_Test_CPTCodes(TestInvoice_Test_CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.CPTCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Firm")]
	public partial class Firm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ContactListID;
		
		private bool _isActiveStatus;
		
		private string _Name;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Fax;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Attorney> _Attorneys;
		
		private EntitySet<InvoiceFirm> _InvoiceFirms;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ContactList> _ContactList;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnContactListIDChanging(int value);
    partial void OnContactListIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Firm()
		{
			this._Attorneys = new EntitySet<Attorney>(new Action<Attorney>(this.attach_Attorneys), new Action<Attorney>(this.detach_Attorneys));
			this._InvoiceFirms = new EntitySet<InvoiceFirm>(new Action<InvoiceFirm>(this.attach_InvoiceFirms), new Action<InvoiceFirm>(this.detach_InvoiceFirms));
			this._Company = default(EntityRef<Company>);
			this._ContactList = default(EntityRef<ContactList>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactListID", DbType="Int NOT NULL")]
		public int ContactListID
		{
			get
			{
				return this._ContactListID;
			}
			set
			{
				if ((this._ContactListID != value))
				{
					if (this._ContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactListIDChanging(value);
					this.SendPropertyChanging();
					this._ContactListID = value;
					this.SendPropertyChanged("ContactListID");
					this.OnContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(100)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Firm_Attorney", Storage="_Attorneys", ThisKey="ID", OtherKey="FirmID")]
		public EntitySet<Attorney> Attorneys
		{
			get
			{
				return this._Attorneys;
			}
			set
			{
				this._Attorneys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Firm_InvoiceFirm", Storage="_InvoiceFirms", ThisKey="ID", OtherKey="FirmID")]
		public EntitySet<InvoiceFirm> InvoiceFirms
		{
			get
			{
				return this._InvoiceFirms;
			}
			set
			{
				this._InvoiceFirms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Firm", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Firms.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Firms.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Firm", Storage="_ContactList", ThisKey="ContactListID", OtherKey="ID", IsForeignKey=true)]
		public ContactList ContactList
		{
			get
			{
				return this._ContactList.Entity;
			}
			set
			{
				ContactList previousValue = this._ContactList.Entity;
				if (((previousValue != value) 
							|| (this._ContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactList.Entity = null;
						previousValue.Firms.Remove(this);
					}
					this._ContactList.Entity = value;
					if ((value != null))
					{
						value.Firms.Add(this);
						this._ContactListID = value.ID;
					}
					else
					{
						this._ContactListID = default(int);
					}
					this.SendPropertyChanged("ContactList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Firm", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Firms.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Firms.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attorneys(Attorney entity)
		{
			this.SendPropertyChanging();
			entity.Firm = this;
		}
		
		private void detach_Attorneys(Attorney entity)
		{
			this.SendPropertyChanging();
			entity.Firm = null;
		}
		
		private void attach_InvoiceFirms(InvoiceFirm entity)
		{
			this.SendPropertyChanging();
			entity.Firm = this;
		}
		
		private void detach_InvoiceFirms(InvoiceFirm entity)
		{
			this.SendPropertyChanging();
			entity.Firm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InvoiceNumber;
		
		private int _CompanyID;
		
		private System.Nullable<System.DateTime> _DateOfAccident;
		
		private int _InvoiceStatusTypeID;
		
		private bool _isComplete;
		
		private System.Nullable<int> _InvoicePhysicianID;
		
		private int _InvoiceAttorneyID;
		
		private int _InvoicePatientID;
		
		private int _InvoiceTypeID;
		
		private System.Nullable<int> _TestInvoiceID;
		
		private System.Nullable<int> _SurgeryInvoiceID;
		
		private System.Nullable<System.DateTime> _InvoiceClosedDate;
		
		private System.Nullable<System.DateTime> _DatePaid;
		
		private System.Nullable<decimal> _ServiceFeeWaived;
		
		private System.Nullable<decimal> _LossesAmount;
		
		private decimal _YearlyInterest;
		
		private int _LoanTermMonths;
		
		private int _ServiceFeeWaivedMonths;
		
		private decimal _CalculatedCumulativeIntrest;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private System.Nullable<bool> _UseAttorneyTerms;
		
		private System.Nullable<bool> _CustomTerms;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<InvoiceChangeLog> _InvoiceChangeLogs;
		
		private EntitySet<InvoiceInterestCalculationLog> _InvoiceInterestCalculationLogs;
		
		private EntitySet<Payment> _Payments;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<InvoiceAttorney> _InvoiceAttorney;
		
		private EntityRef<InvoicePatient> _InvoicePatient;
		
		private EntityRef<InvoicePhysician> _InvoicePhysician;
		
		private EntityRef<InvoiceStatusType> _InvoiceStatusType;
		
		private EntityRef<InvoiceType> _InvoiceType;
		
		private EntityRef<SurgeryInvoice> _SurgeryInvoice;
		
		private EntityRef<TestInvoice> _TestInvoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceNumberChanging(int value);
    partial void OnInvoiceNumberChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnDateOfAccidentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAccidentChanged();
    partial void OnInvoiceStatusTypeIDChanging(int value);
    partial void OnInvoiceStatusTypeIDChanged();
    partial void OnisCompleteChanging(bool value);
    partial void OnisCompleteChanged();
    partial void OnInvoicePhysicianIDChanging(System.Nullable<int> value);
    partial void OnInvoicePhysicianIDChanged();
    partial void OnInvoiceAttorneyIDChanging(int value);
    partial void OnInvoiceAttorneyIDChanged();
    partial void OnInvoicePatientIDChanging(int value);
    partial void OnInvoicePatientIDChanged();
    partial void OnInvoiceTypeIDChanging(int value);
    partial void OnInvoiceTypeIDChanged();
    partial void OnTestInvoiceIDChanging(System.Nullable<int> value);
    partial void OnTestInvoiceIDChanged();
    partial void OnSurgeryInvoiceIDChanging(System.Nullable<int> value);
    partial void OnSurgeryInvoiceIDChanged();
    partial void OnInvoiceClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInvoiceClosedDateChanged();
    partial void OnDatePaidChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePaidChanged();
    partial void OnServiceFeeWaivedChanging(System.Nullable<decimal> value);
    partial void OnServiceFeeWaivedChanged();
    partial void OnLossesAmountChanging(System.Nullable<decimal> value);
    partial void OnLossesAmountChanged();
    partial void OnYearlyInterestChanging(decimal value);
    partial void OnYearlyInterestChanged();
    partial void OnLoanTermMonthsChanging(int value);
    partial void OnLoanTermMonthsChanged();
    partial void OnServiceFeeWaivedMonthsChanging(int value);
    partial void OnServiceFeeWaivedMonthsChanged();
    partial void OnCalculatedCumulativeIntrestChanging(decimal value);
    partial void OnCalculatedCumulativeIntrestChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnUseAttorneyTermsChanging(System.Nullable<bool> value);
    partial void OnUseAttorneyTermsChanged();
    partial void OnCustomTermsChanging(System.Nullable<bool> value);
    partial void OnCustomTermsChanged();
    #endregion
		
		public Invoice()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._InvoiceChangeLogs = new EntitySet<InvoiceChangeLog>(new Action<InvoiceChangeLog>(this.attach_InvoiceChangeLogs), new Action<InvoiceChangeLog>(this.detach_InvoiceChangeLogs));
			this._InvoiceInterestCalculationLogs = new EntitySet<InvoiceInterestCalculationLog>(new Action<InvoiceInterestCalculationLog>(this.attach_InvoiceInterestCalculationLogs), new Action<InvoiceInterestCalculationLog>(this.detach_InvoiceInterestCalculationLogs));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._Company = default(EntityRef<Company>);
			this._InvoiceAttorney = default(EntityRef<InvoiceAttorney>);
			this._InvoicePatient = default(EntityRef<InvoicePatient>);
			this._InvoicePhysician = default(EntityRef<InvoicePhysician>);
			this._InvoiceStatusType = default(EntityRef<InvoiceStatusType>);
			this._InvoiceType = default(EntityRef<InvoiceType>);
			this._SurgeryInvoice = default(EntityRef<SurgeryInvoice>);
			this._TestInvoice = default(EntityRef<TestInvoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNumber", DbType="Int NOT NULL")]
		public int InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this.OnInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNumber = value;
					this.SendPropertyChanged("InvoiceNumber");
					this.OnInvoiceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAccident", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfAccident
		{
			get
			{
				return this._DateOfAccident;
			}
			set
			{
				if ((this._DateOfAccident != value))
				{
					this.OnDateOfAccidentChanging(value);
					this.SendPropertyChanging();
					this._DateOfAccident = value;
					this.SendPropertyChanged("DateOfAccident");
					this.OnDateOfAccidentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceStatusTypeID", DbType="Int NOT NULL")]
		public int InvoiceStatusTypeID
		{
			get
			{
				return this._InvoiceStatusTypeID;
			}
			set
			{
				if ((this._InvoiceStatusTypeID != value))
				{
					if (this._InvoiceStatusType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceStatusTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceStatusTypeID = value;
					this.SendPropertyChanged("InvoiceStatusTypeID");
					this.OnInvoiceStatusTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isComplete", DbType="Bit NOT NULL")]
		public bool isComplete
		{
			get
			{
				return this._isComplete;
			}
			set
			{
				if ((this._isComplete != value))
				{
					this.OnisCompleteChanging(value);
					this.SendPropertyChanging();
					this._isComplete = value;
					this.SendPropertyChanged("isComplete");
					this.OnisCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoicePhysicianID", DbType="Int")]
		public System.Nullable<int> InvoicePhysicianID
		{
			get
			{
				return this._InvoicePhysicianID;
			}
			set
			{
				if ((this._InvoicePhysicianID != value))
				{
					if (this._InvoicePhysician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoicePhysicianIDChanging(value);
					this.SendPropertyChanging();
					this._InvoicePhysicianID = value;
					this.SendPropertyChanged("InvoicePhysicianID");
					this.OnInvoicePhysicianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceAttorneyID", DbType="Int NOT NULL")]
		public int InvoiceAttorneyID
		{
			get
			{
				return this._InvoiceAttorneyID;
			}
			set
			{
				if ((this._InvoiceAttorneyID != value))
				{
					if (this._InvoiceAttorney.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceAttorneyIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceAttorneyID = value;
					this.SendPropertyChanged("InvoiceAttorneyID");
					this.OnInvoiceAttorneyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoicePatientID", DbType="Int NOT NULL")]
		public int InvoicePatientID
		{
			get
			{
				return this._InvoicePatientID;
			}
			set
			{
				if ((this._InvoicePatientID != value))
				{
					if (this._InvoicePatient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoicePatientIDChanging(value);
					this.SendPropertyChanging();
					this._InvoicePatientID = value;
					this.SendPropertyChanged("InvoicePatientID");
					this.OnInvoicePatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceTypeID", DbType="Int NOT NULL")]
		public int InvoiceTypeID
		{
			get
			{
				return this._InvoiceTypeID;
			}
			set
			{
				if ((this._InvoiceTypeID != value))
				{
					if (this._InvoiceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceTypeID = value;
					this.SendPropertyChanged("InvoiceTypeID");
					this.OnInvoiceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestInvoiceID", DbType="Int")]
		public System.Nullable<int> TestInvoiceID
		{
			get
			{
				return this._TestInvoiceID;
			}
			set
			{
				if ((this._TestInvoiceID != value))
				{
					if (this._TestInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._TestInvoiceID = value;
					this.SendPropertyChanged("TestInvoiceID");
					this.OnTestInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryInvoiceID", DbType="Int")]
		public System.Nullable<int> SurgeryInvoiceID
		{
			get
			{
				return this._SurgeryInvoiceID;
			}
			set
			{
				if ((this._SurgeryInvoiceID != value))
				{
					if (this._SurgeryInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurgeryInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._SurgeryInvoiceID = value;
					this.SendPropertyChanged("SurgeryInvoiceID");
					this.OnSurgeryInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceClosedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InvoiceClosedDate
		{
			get
			{
				return this._InvoiceClosedDate;
			}
			set
			{
				if ((this._InvoiceClosedDate != value))
				{
					this.OnInvoiceClosedDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceClosedDate = value;
					this.SendPropertyChanged("InvoiceClosedDate");
					this.OnInvoiceClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePaid", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatePaid
		{
			get
			{
				return this._DatePaid;
			}
			set
			{
				if ((this._DatePaid != value))
				{
					this.OnDatePaidChanging(value);
					this.SendPropertyChanging();
					this._DatePaid = value;
					this.SendPropertyChanged("DatePaid");
					this.OnDatePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFeeWaived", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ServiceFeeWaived
		{
			get
			{
				return this._ServiceFeeWaived;
			}
			set
			{
				if ((this._ServiceFeeWaived != value))
				{
					this.OnServiceFeeWaivedChanging(value);
					this.SendPropertyChanging();
					this._ServiceFeeWaived = value;
					this.SendPropertyChanged("ServiceFeeWaived");
					this.OnServiceFeeWaivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LossesAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> LossesAmount
		{
			get
			{
				return this._LossesAmount;
			}
			set
			{
				if ((this._LossesAmount != value))
				{
					this.OnLossesAmountChanging(value);
					this.SendPropertyChanging();
					this._LossesAmount = value;
					this.SendPropertyChanged("LossesAmount");
					this.OnLossesAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearlyInterest", DbType="Decimal(18,4) NOT NULL")]
		public decimal YearlyInterest
		{
			get
			{
				return this._YearlyInterest;
			}
			set
			{
				if ((this._YearlyInterest != value))
				{
					this.OnYearlyInterestChanging(value);
					this.SendPropertyChanging();
					this._YearlyInterest = value;
					this.SendPropertyChanged("YearlyInterest");
					this.OnYearlyInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanTermMonths", DbType="Int NOT NULL")]
		public int LoanTermMonths
		{
			get
			{
				return this._LoanTermMonths;
			}
			set
			{
				if ((this._LoanTermMonths != value))
				{
					this.OnLoanTermMonthsChanging(value);
					this.SendPropertyChanging();
					this._LoanTermMonths = value;
					this.SendPropertyChanged("LoanTermMonths");
					this.OnLoanTermMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFeeWaivedMonths", DbType="Int NOT NULL")]
		public int ServiceFeeWaivedMonths
		{
			get
			{
				return this._ServiceFeeWaivedMonths;
			}
			set
			{
				if ((this._ServiceFeeWaivedMonths != value))
				{
					this.OnServiceFeeWaivedMonthsChanging(value);
					this.SendPropertyChanging();
					this._ServiceFeeWaivedMonths = value;
					this.SendPropertyChanged("ServiceFeeWaivedMonths");
					this.OnServiceFeeWaivedMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculatedCumulativeIntrest", DbType="Decimal(18,2) NOT NULL")]
		public decimal CalculatedCumulativeIntrest
		{
			get
			{
				return this._CalculatedCumulativeIntrest;
			}
			set
			{
				if ((this._CalculatedCumulativeIntrest != value))
				{
					this.OnCalculatedCumulativeIntrestChanging(value);
					this.SendPropertyChanging();
					this._CalculatedCumulativeIntrest = value;
					this.SendPropertyChanged("CalculatedCumulativeIntrest");
					this.OnCalculatedCumulativeIntrestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseAttorneyTerms", DbType="Bit NULL")]
		public System.Nullable<bool> UseAttorneyTerms
		{
			get
			{
				return this._UseAttorneyTerms;
			}
			set
			{
				if ((this._UseAttorneyTerms != value))
				{
					this.OnUseAttorneyTermsChanging(value);
					this.SendPropertyChanging();
					this._UseAttorneyTerms = value;
					this.SendPropertyChanged("UseAttorneyTerms");
					this.OnUseAttorneyTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomTerms", DbType="Bit NULL")]
		public System.Nullable<bool> CustomTerms
		{
			get
			{
				return this._CustomTerms;
			}
			set
			{
				if ((this._CustomTerms != value))
				{
					this.OnCustomTermsChanging(value);
					this.SendPropertyChanging();
					this._CustomTerms = value;
					this.SendPropertyChanged("CustomTerms");
					this.OnCustomTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Comment", Storage="_Comments", ThisKey="ID", OtherKey="InvoiceID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceChangeLog", Storage="_InvoiceChangeLogs", ThisKey="ID", OtherKey="InvoiceID")]
		public EntitySet<InvoiceChangeLog> InvoiceChangeLogs
		{
			get
			{
				return this._InvoiceChangeLogs;
			}
			set
			{
				this._InvoiceChangeLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceInterestCalculationLog", Storage="_InvoiceInterestCalculationLogs", ThisKey="ID", OtherKey="InvoiceID")]
		public EntitySet<InvoiceInterestCalculationLog> InvoiceInterestCalculationLogs
		{
			get
			{
				return this._InvoiceInterestCalculationLogs;
			}
			set
			{
				this._InvoiceInterestCalculationLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Payment", Storage="_Payments", ThisKey="ID", OtherKey="InvoiceID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Invoice", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceAttorney_Invoice", Storage="_InvoiceAttorney", ThisKey="InvoiceAttorneyID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceAttorney InvoiceAttorney
		{
			get
			{
				return this._InvoiceAttorney.Entity;
			}
			set
			{
				InvoiceAttorney previousValue = this._InvoiceAttorney.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceAttorney.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceAttorney.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._InvoiceAttorney.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._InvoiceAttorneyID = value.ID;
					}
					else
					{
						this._InvoiceAttorneyID = default(int);
					}
					this.SendPropertyChanged("InvoiceAttorney");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoicePatient_Invoice", Storage="_InvoicePatient", ThisKey="InvoicePatientID", OtherKey="ID", IsForeignKey=true)]
		public InvoicePatient InvoicePatient
		{
			get
			{
				return this._InvoicePatient.Entity;
			}
			set
			{
				InvoicePatient previousValue = this._InvoicePatient.Entity;
				if (((previousValue != value) 
							|| (this._InvoicePatient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoicePatient.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._InvoicePatient.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._InvoicePatientID = value.ID;
					}
					else
					{
						this._InvoicePatientID = default(int);
					}
					this.SendPropertyChanged("InvoicePatient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoicePhysician_Invoice", Storage="_InvoicePhysician", ThisKey="InvoicePhysicianID", OtherKey="ID", IsForeignKey=true)]
		public InvoicePhysician InvoicePhysician
		{
			get
			{
				return this._InvoicePhysician.Entity;
			}
			set
			{
				InvoicePhysician previousValue = this._InvoicePhysician.Entity;
				if (((previousValue != value) 
							|| (this._InvoicePhysician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoicePhysician.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._InvoicePhysician.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._InvoicePhysicianID = value.ID;
					}
					else
					{
						this._InvoicePhysicianID = default(Nullable<int>);
					}
					this.SendPropertyChanged("InvoicePhysician");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceStatusType_Invoice", Storage="_InvoiceStatusType", ThisKey="InvoiceStatusTypeID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceStatusType InvoiceStatusType
		{
			get
			{
				return this._InvoiceStatusType.Entity;
			}
			set
			{
				InvoiceStatusType previousValue = this._InvoiceStatusType.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceStatusType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceStatusType.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._InvoiceStatusType.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._InvoiceStatusTypeID = value.ID;
					}
					else
					{
						this._InvoiceStatusTypeID = default(int);
					}
					this.SendPropertyChanged("InvoiceStatusType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceType_Invoice", Storage="_InvoiceType", ThisKey="InvoiceTypeID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceType InvoiceType
		{
			get
			{
				return this._InvoiceType.Entity;
			}
			set
			{
				InvoiceType previousValue = this._InvoiceType.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceType.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._InvoiceType.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._InvoiceTypeID = value.ID;
					}
					else
					{
						this._InvoiceTypeID = default(int);
					}
					this.SendPropertyChanged("InvoiceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Invoice", Storage="_SurgeryInvoice", ThisKey="SurgeryInvoiceID", OtherKey="ID", IsForeignKey=true)]
		public SurgeryInvoice SurgeryInvoice
		{
			get
			{
				return this._SurgeryInvoice.Entity;
			}
			set
			{
				SurgeryInvoice previousValue = this._SurgeryInvoice.Entity;
				if (((previousValue != value) 
							|| (this._SurgeryInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurgeryInvoice.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._SurgeryInvoice.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._SurgeryInvoiceID = value.ID;
					}
					else
					{
						this._SurgeryInvoiceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SurgeryInvoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestInvoice_Invoice", Storage="_TestInvoice", ThisKey="TestInvoiceID", OtherKey="ID", IsForeignKey=true)]
		public TestInvoice TestInvoice
		{
			get
			{
				return this._TestInvoice.Entity;
			}
			set
			{
				TestInvoice previousValue = this._TestInvoice.Entity;
				if (((previousValue != value) 
							|| (this._TestInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestInvoice.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._TestInvoice.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._TestInvoiceID = value.ID;
					}
					else
					{
						this._TestInvoiceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestInvoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_InvoiceChangeLogs(InvoiceChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceChangeLogs(InvoiceChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_InvoiceInterestCalculationLogs(InvoiceInterestCalculationLog entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceInterestCalculationLogs(InvoiceInterestCalculationLog entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceAttorney")]
	public partial class InvoiceAttorney : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AttorneyID;
		
		private int _InvoiceContactListID;
		
		private System.Nullable<int> _InvoiceFirmID;
		
		private bool _isActiveStatus;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Notes;
		
		private string _DiscountNotes;
		
		private System.Nullable<decimal> _DepositAmountRequired;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private System.Nullable<int> _Temp_InvoiceNumber;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Attorney> _Attorney;
		
		private EntityRef<InvoiceContactList> _InvoiceContactList;
		
		private EntityRef<InvoiceFirm> _InvoiceFirm;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAttorneyIDChanging(int value);
    partial void OnAttorneyIDChanged();
    partial void OnInvoiceContactListIDChanging(int value);
    partial void OnInvoiceContactListIDChanged();
    partial void OnInvoiceFirmIDChanging(System.Nullable<int> value);
    partial void OnInvoiceFirmIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnDiscountNotesChanging(string value);
    partial void OnDiscountNotesChanged();
    partial void OnDepositAmountRequiredChanging(System.Nullable<decimal> value);
    partial void OnDepositAmountRequiredChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnTemp_InvoiceNumberChanging(System.Nullable<int> value);
    partial void OnTemp_InvoiceNumberChanged();
    #endregion
		
		public InvoiceAttorney()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Attorney = default(EntityRef<Attorney>);
			this._InvoiceContactList = default(EntityRef<InvoiceContactList>);
			this._InvoiceFirm = default(EntityRef<InvoiceFirm>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttorneyID", DbType="Int NOT NULL")]
		public int AttorneyID
		{
			get
			{
				return this._AttorneyID;
			}
			set
			{
				if ((this._AttorneyID != value))
				{
					if (this._Attorney.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttorneyIDChanging(value);
					this.SendPropertyChanging();
					this._AttorneyID = value;
					this.SendPropertyChanged("AttorneyID");
					this.OnAttorneyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceContactListID", DbType="Int NOT NULL")]
		public int InvoiceContactListID
		{
			get
			{
				return this._InvoiceContactListID;
			}
			set
			{
				if ((this._InvoiceContactListID != value))
				{
					if (this._InvoiceContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceContactListIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceContactListID = value;
					this.SendPropertyChanged("InvoiceContactListID");
					this.OnInvoiceContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceFirmID", DbType="Int")]
		public System.Nullable<int> InvoiceFirmID
		{
			get
			{
				return this._InvoiceFirmID;
			}
			set
			{
				if ((this._InvoiceFirmID != value))
				{
					if (this._InvoiceFirm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceFirmIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceFirmID = value;
					this.SendPropertyChanged("InvoiceFirmID");
					this.OnInvoiceFirmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(500)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountNotes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string DiscountNotes
		{
			get
			{
				return this._DiscountNotes;
			}
			set
			{
				if ((this._DiscountNotes != value))
				{
					this.OnDiscountNotesChanging(value);
					this.SendPropertyChanging();
					this._DiscountNotes = value;
					this.SendPropertyChanged("DiscountNotes");
					this.OnDiscountNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositAmountRequired", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> DepositAmountRequired
		{
			get
			{
				return this._DepositAmountRequired;
			}
			set
			{
				if ((this._DepositAmountRequired != value))
				{
					this.OnDepositAmountRequiredChanging(value);
					this.SendPropertyChanging();
					this._DepositAmountRequired = value;
					this.SendPropertyChanged("DepositAmountRequired");
					this.OnDepositAmountRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp_InvoiceNumber", DbType="Int")]
		public System.Nullable<int> Temp_InvoiceNumber
		{
			get
			{
				return this._Temp_InvoiceNumber;
			}
			set
			{
				if ((this._Temp_InvoiceNumber != value))
				{
					this.OnTemp_InvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._Temp_InvoiceNumber = value;
					this.SendPropertyChanged("Temp_InvoiceNumber");
					this.OnTemp_InvoiceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceAttorney_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="InvoiceAttorneyID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attorney_InvoiceAttorney", Storage="_Attorney", ThisKey="AttorneyID", OtherKey="ID", IsForeignKey=true)]
		public Attorney Attorney
		{
			get
			{
				return this._Attorney.Entity;
			}
			set
			{
				Attorney previousValue = this._Attorney.Entity;
				if (((previousValue != value) 
							|| (this._Attorney.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attorney.Entity = null;
						previousValue.InvoiceAttorneys.Remove(this);
					}
					this._Attorney.Entity = value;
					if ((value != null))
					{
						value.InvoiceAttorneys.Add(this);
						this._AttorneyID = value.ID;
					}
					else
					{
						this._AttorneyID = default(int);
					}
					this.SendPropertyChanged("Attorney");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoiceAttorney", Storage="_InvoiceContactList", ThisKey="InvoiceContactListID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceContactList InvoiceContactList
		{
			get
			{
				return this._InvoiceContactList.Entity;
			}
			set
			{
				InvoiceContactList previousValue = this._InvoiceContactList.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceContactList.Entity = null;
						previousValue.InvoiceAttorneys.Remove(this);
					}
					this._InvoiceContactList.Entity = value;
					if ((value != null))
					{
						value.InvoiceAttorneys.Add(this);
						this._InvoiceContactListID = value.ID;
					}
					else
					{
						this._InvoiceContactListID = default(int);
					}
					this.SendPropertyChanged("InvoiceContactList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceFirm_InvoiceAttorney", Storage="_InvoiceFirm", ThisKey="InvoiceFirmID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceFirm InvoiceFirm
		{
			get
			{
				return this._InvoiceFirm.Entity;
			}
			set
			{
				InvoiceFirm previousValue = this._InvoiceFirm.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceFirm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceFirm.Entity = null;
						previousValue.InvoiceAttorneys.Remove(this);
					}
					this._InvoiceFirm.Entity = value;
					if ((value != null))
					{
						value.InvoiceAttorneys.Add(this);
						this._InvoiceFirmID = value.ID;
					}
					else
					{
						this._InvoiceFirmID = default(Nullable<int>);
					}
					this.SendPropertyChanged("InvoiceFirm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoiceAttorney", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.InvoiceAttorneys.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.InvoiceAttorneys.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceAttorney = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceAttorney = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceChangeLog")]
	public partial class InvoiceChangeLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InvoiceID;
		
		private int _InvoiceChangeLogTypeID;
		
		private decimal _Amount;
		
		private int _UserID;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<User> _User;
		
		private EntityRef<InvoiceChangeLogType> _InvoiceChangeLogType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceIDChanging(int value);
    partial void OnInvoiceIDChanged();
    partial void OnInvoiceChangeLogTypeIDChanging(int value);
    partial void OnInvoiceChangeLogTypeIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoiceChangeLog()
		{
			this._Invoice = default(EntityRef<Invoice>);
			this._User = default(EntityRef<User>);
			this._InvoiceChangeLogType = default(EntityRef<InvoiceChangeLogType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="Int NOT NULL")]
		public int InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceChangeLogTypeID", DbType="Int NOT NULL")]
		public int InvoiceChangeLogTypeID
		{
			get
			{
				return this._InvoiceChangeLogTypeID;
			}
			set
			{
				if ((this._InvoiceChangeLogTypeID != value))
				{
					if (this._InvoiceChangeLogType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceChangeLogTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceChangeLogTypeID = value;
					this.SendPropertyChanged("InvoiceChangeLogTypeID");
					this.OnInvoiceChangeLogTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceChangeLog", Storage="_Invoice", ThisKey="InvoiceID", OtherKey="ID", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceChangeLogs.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceChangeLogs.Add(this);
						this._InvoiceID = value.ID;
					}
					else
					{
						this._InvoiceID = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InvoiceChangeLog", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.InvoiceChangeLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.InvoiceChangeLogs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceChangeLogType_InvoiceChangeLog", Storage="_InvoiceChangeLogType", ThisKey="InvoiceChangeLogTypeID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceChangeLogType InvoiceChangeLogType
		{
			get
			{
				return this._InvoiceChangeLogType.Entity;
			}
			set
			{
				InvoiceChangeLogType previousValue = this._InvoiceChangeLogType.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceChangeLogType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceChangeLogType.Entity = null;
						previousValue.InvoiceChangeLogs.Remove(this);
					}
					this._InvoiceChangeLogType.Entity = value;
					if ((value != null))
					{
						value.InvoiceChangeLogs.Add(this);
						this._InvoiceChangeLogTypeID = value.ID;
					}
					else
					{
						this._InvoiceChangeLogTypeID = default(int);
					}
					this.SendPropertyChanged("InvoiceChangeLogType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceChangeLogType")]
	public partial class InvoiceChangeLogType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<InvoiceChangeLog> _InvoiceChangeLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoiceChangeLogType()
		{
			this._InvoiceChangeLogs = new EntitySet<InvoiceChangeLog>(new Action<InvoiceChangeLog>(this.attach_InvoiceChangeLogs), new Action<InvoiceChangeLog>(this.detach_InvoiceChangeLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceChangeLogType_InvoiceChangeLog", Storage="_InvoiceChangeLogs", ThisKey="ID", OtherKey="InvoiceChangeLogTypeID")]
		public EntitySet<InvoiceChangeLog> InvoiceChangeLogs
		{
			get
			{
				return this._InvoiceChangeLogs;
			}
			set
			{
				this._InvoiceChangeLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceChangeLogs(InvoiceChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceChangeLogType = this;
		}
		
		private void detach_InvoiceChangeLogs(InvoiceChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceChangeLogType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceContactList")]
	public partial class InvoiceContactList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private System.Nullable<int> _Temp_AttorneyID;
		
		private EntitySet<InvoiceAttorney> _InvoiceAttorneys;
		
		private EntitySet<InvoiceContact> _InvoiceContacts;
		
		private EntitySet<InvoiceFirm> _InvoiceFirms;
		
		private EntitySet<InvoicePhysician> _InvoicePhysicians;
		
		private EntitySet<InvoiceProvider> _InvoiceProviders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnTemp_AttorneyIDChanging(System.Nullable<int> value);
    partial void OnTemp_AttorneyIDChanged();
    #endregion
		
		public InvoiceContactList()
		{
			this._InvoiceAttorneys = new EntitySet<InvoiceAttorney>(new Action<InvoiceAttorney>(this.attach_InvoiceAttorneys), new Action<InvoiceAttorney>(this.detach_InvoiceAttorneys));
			this._InvoiceContacts = new EntitySet<InvoiceContact>(new Action<InvoiceContact>(this.attach_InvoiceContacts), new Action<InvoiceContact>(this.detach_InvoiceContacts));
			this._InvoiceFirms = new EntitySet<InvoiceFirm>(new Action<InvoiceFirm>(this.attach_InvoiceFirms), new Action<InvoiceFirm>(this.detach_InvoiceFirms));
			this._InvoicePhysicians = new EntitySet<InvoicePhysician>(new Action<InvoicePhysician>(this.attach_InvoicePhysicians), new Action<InvoicePhysician>(this.detach_InvoicePhysicians));
			this._InvoiceProviders = new EntitySet<InvoiceProvider>(new Action<InvoiceProvider>(this.attach_InvoiceProviders), new Action<InvoiceProvider>(this.detach_InvoiceProviders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp_AttorneyID", DbType="Int")]
		public System.Nullable<int> Temp_AttorneyID
		{
			get
			{
				return this._Temp_AttorneyID;
			}
			set
			{
				if ((this._Temp_AttorneyID != value))
				{
					this.OnTemp_AttorneyIDChanging(value);
					this.SendPropertyChanging();
					this._Temp_AttorneyID = value;
					this.SendPropertyChanged("Temp_AttorneyID");
					this.OnTemp_AttorneyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoiceAttorney", Storage="_InvoiceAttorneys", ThisKey="ID", OtherKey="InvoiceContactListID")]
		public EntitySet<InvoiceAttorney> InvoiceAttorneys
		{
			get
			{
				return this._InvoiceAttorneys;
			}
			set
			{
				this._InvoiceAttorneys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoiceContact", Storage="_InvoiceContacts", ThisKey="ID", OtherKey="InvoiceContactListID")]
		public EntitySet<InvoiceContact> InvoiceContacts
		{
			get
			{
				return this._InvoiceContacts;
			}
			set
			{
				this._InvoiceContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoiceFirm", Storage="_InvoiceFirms", ThisKey="ID", OtherKey="InvoiceContactListID")]
		public EntitySet<InvoiceFirm> InvoiceFirms
		{
			get
			{
				return this._InvoiceFirms;
			}
			set
			{
				this._InvoiceFirms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoicePhysician", Storage="_InvoicePhysicians", ThisKey="ID", OtherKey="InvoiceContactListID")]
		public EntitySet<InvoicePhysician> InvoicePhysicians
		{
			get
			{
				return this._InvoicePhysicians;
			}
			set
			{
				this._InvoicePhysicians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoiceProvider", Storage="_InvoiceProviders", ThisKey="ID", OtherKey="InvoiceContactListID")]
		public EntitySet<InvoiceProvider> InvoiceProviders
		{
			get
			{
				return this._InvoiceProviders;
			}
			set
			{
				this._InvoiceProviders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceAttorneys(InvoiceAttorney entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = this;
		}
		
		private void detach_InvoiceAttorneys(InvoiceAttorney entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = null;
		}
		
		private void attach_InvoiceContacts(InvoiceContact entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = this;
		}
		
		private void detach_InvoiceContacts(InvoiceContact entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = null;
		}
		
		private void attach_InvoiceFirms(InvoiceFirm entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = this;
		}
		
		private void detach_InvoiceFirms(InvoiceFirm entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = null;
		}
		
		private void attach_InvoicePhysicians(InvoicePhysician entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = this;
		}
		
		private void detach_InvoicePhysicians(InvoicePhysician entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = null;
		}
		
		private void attach_InvoiceProviders(InvoiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = this;
		}
		
		private void detach_InvoiceProviders(InvoiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContactList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceContacts")]
	public partial class InvoiceContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InvoiceContactListID;
		
		private string _Name;
		
		private string _Position;
		
		private string _Phone;
		
		private string _Email;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<InvoiceContactList> _InvoiceContactList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceContactListIDChanging(int value);
    partial void OnInvoiceContactListIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoiceContact()
		{
			this._InvoiceContactList = default(EntityRef<InvoiceContactList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceContactListID", DbType="Int NOT NULL")]
		public int InvoiceContactListID
		{
			get
			{
				return this._InvoiceContactListID;
			}
			set
			{
				if ((this._InvoiceContactListID != value))
				{
					if (this._InvoiceContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceContactListIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceContactListID = value;
					this.SendPropertyChanged("InvoiceContactListID");
					this.OnInvoiceContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoiceContact", Storage="_InvoiceContactList", ThisKey="InvoiceContactListID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceContactList InvoiceContactList
		{
			get
			{
				return this._InvoiceContactList.Entity;
			}
			set
			{
				InvoiceContactList previousValue = this._InvoiceContactList.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceContactList.Entity = null;
						previousValue.InvoiceContacts.Remove(this);
					}
					this._InvoiceContactList.Entity = value;
					if ((value != null))
					{
						value.InvoiceContacts.Add(this);
						this._InvoiceContactListID = value.ID;
					}
					else
					{
						this._InvoiceContactListID = default(int);
					}
					this.SendPropertyChanged("InvoiceContactList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceFirm")]
	public partial class InvoiceFirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FirmID;
		
		private int _InvoiceContactListID;
		
		private bool _isActiveStatus;
		
		private string _Name;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Fax;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<InvoiceAttorney> _InvoiceAttorneys;
		
		private EntityRef<Firm> _Firm;
		
		private EntityRef<InvoiceContactList> _InvoiceContactList;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirmIDChanging(int value);
    partial void OnFirmIDChanged();
    partial void OnInvoiceContactListIDChanging(int value);
    partial void OnInvoiceContactListIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoiceFirm()
		{
			this._InvoiceAttorneys = new EntitySet<InvoiceAttorney>(new Action<InvoiceAttorney>(this.attach_InvoiceAttorneys), new Action<InvoiceAttorney>(this.detach_InvoiceAttorneys));
			this._Firm = default(EntityRef<Firm>);
			this._InvoiceContactList = default(EntityRef<InvoiceContactList>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirmID", DbType="Int NOT NULL")]
		public int FirmID
		{
			get
			{
				return this._FirmID;
			}
			set
			{
				if ((this._FirmID != value))
				{
					if (this._Firm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFirmIDChanging(value);
					this.SendPropertyChanging();
					this._FirmID = value;
					this.SendPropertyChanged("FirmID");
					this.OnFirmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceContactListID", DbType="Int NOT NULL")]
		public int InvoiceContactListID
		{
			get
			{
				return this._InvoiceContactListID;
			}
			set
			{
				if ((this._InvoiceContactListID != value))
				{
					if (this._InvoiceContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceContactListIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceContactListID = value;
					this.SendPropertyChanged("InvoiceContactListID");
					this.OnInvoiceContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(500)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceFirm_InvoiceAttorney", Storage="_InvoiceAttorneys", ThisKey="ID", OtherKey="InvoiceFirmID")]
		public EntitySet<InvoiceAttorney> InvoiceAttorneys
		{
			get
			{
				return this._InvoiceAttorneys;
			}
			set
			{
				this._InvoiceAttorneys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Firm_InvoiceFirm", Storage="_Firm", ThisKey="FirmID", OtherKey="ID", IsForeignKey=true)]
		public Firm Firm
		{
			get
			{
				return this._Firm.Entity;
			}
			set
			{
				Firm previousValue = this._Firm.Entity;
				if (((previousValue != value) 
							|| (this._Firm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Firm.Entity = null;
						previousValue.InvoiceFirms.Remove(this);
					}
					this._Firm.Entity = value;
					if ((value != null))
					{
						value.InvoiceFirms.Add(this);
						this._FirmID = value.ID;
					}
					else
					{
						this._FirmID = default(int);
					}
					this.SendPropertyChanged("Firm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoiceFirm", Storage="_InvoiceContactList", ThisKey="InvoiceContactListID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceContactList InvoiceContactList
		{
			get
			{
				return this._InvoiceContactList.Entity;
			}
			set
			{
				InvoiceContactList previousValue = this._InvoiceContactList.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceContactList.Entity = null;
						previousValue.InvoiceFirms.Remove(this);
					}
					this._InvoiceContactList.Entity = value;
					if ((value != null))
					{
						value.InvoiceFirms.Add(this);
						this._InvoiceContactListID = value.ID;
					}
					else
					{
						this._InvoiceContactListID = default(int);
					}
					this.SendPropertyChanged("InvoiceContactList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoiceFirm", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.InvoiceFirms.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.InvoiceFirms.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceAttorneys(InvoiceAttorney entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceFirm = this;
		}
		
		private void detach_InvoiceAttorneys(InvoiceAttorney entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceFirm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceInterestCalculationLog")]
	public partial class InvoiceInterestCalculationLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InvoiceID;
		
		private decimal _YearlyInterest;
		
		private int _ServiceFeeWaivedMonths;
		
		private System.Nullable<System.DateTime> _AmortizationDate;
		
		private System.Nullable<System.DateTime> _DateInterestBegins;
		
		private decimal _TotalCost;
		
		private decimal _TotalPPODiscount;
		
		private decimal _TotalAppliedPayments;
		
		private decimal _BalanceDue;
		
		private decimal _CalculatedInterest;
		
		private decimal _PreviousCumulativeInterest;
		
		private decimal _NewCumulativeInterest;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceIDChanging(int value);
    partial void OnInvoiceIDChanged();
    partial void OnYearlyInterestChanging(decimal value);
    partial void OnYearlyInterestChanged();
    partial void OnServiceFeeWaivedMonthsChanging(int value);
    partial void OnServiceFeeWaivedMonthsChanged();
    partial void OnAmortizationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAmortizationDateChanged();
    partial void OnDateInterestBeginsChanging(System.Nullable<System.DateTime> value);
    partial void OnDateInterestBeginsChanged();
    partial void OnTotalCostChanging(decimal value);
    partial void OnTotalCostChanged();
    partial void OnTotalPPODiscountChanging(decimal value);
    partial void OnTotalPPODiscountChanged();
    partial void OnTotalAppliedPaymentsChanging(decimal value);
    partial void OnTotalAppliedPaymentsChanged();
    partial void OnBalanceDueChanging(decimal value);
    partial void OnBalanceDueChanged();
    partial void OnCalculatedInterestChanging(decimal value);
    partial void OnCalculatedInterestChanged();
    partial void OnPreviousCumulativeInterestChanging(decimal value);
    partial void OnPreviousCumulativeInterestChanged();
    partial void OnNewCumulativeInterestChanging(decimal value);
    partial void OnNewCumulativeInterestChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoiceInterestCalculationLog()
		{
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="Int NOT NULL")]
		public int InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearlyInterest", DbType="Decimal(18,4) NOT NULL")]
		public decimal YearlyInterest
		{
			get
			{
				return this._YearlyInterest;
			}
			set
			{
				if ((this._YearlyInterest != value))
				{
					this.OnYearlyInterestChanging(value);
					this.SendPropertyChanging();
					this._YearlyInterest = value;
					this.SendPropertyChanged("YearlyInterest");
					this.OnYearlyInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFeeWaivedMonths", DbType="Int NOT NULL")]
		public int ServiceFeeWaivedMonths
		{
			get
			{
				return this._ServiceFeeWaivedMonths;
			}
			set
			{
				if ((this._ServiceFeeWaivedMonths != value))
				{
					this.OnServiceFeeWaivedMonthsChanging(value);
					this.SendPropertyChanging();
					this._ServiceFeeWaivedMonths = value;
					this.SendPropertyChanged("ServiceFeeWaivedMonths");
					this.OnServiceFeeWaivedMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationDate", DbType="Date")]
		public System.Nullable<System.DateTime> AmortizationDate
		{
			get
			{
				return this._AmortizationDate;
			}
			set
			{
				if ((this._AmortizationDate != value))
				{
					this.OnAmortizationDateChanging(value);
					this.SendPropertyChanging();
					this._AmortizationDate = value;
					this.SendPropertyChanged("AmortizationDate");
					this.OnAmortizationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateInterestBegins", DbType="Date")]
		public System.Nullable<System.DateTime> DateInterestBegins
		{
			get
			{
				return this._DateInterestBegins;
			}
			set
			{
				if ((this._DateInterestBegins != value))
				{
					this.OnDateInterestBeginsChanging(value);
					this.SendPropertyChanging();
					this._DateInterestBegins = value;
					this.SendPropertyChanged("DateInterestBegins");
					this.OnDateInterestBeginsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Decimal(18,2) NOT NULL")]
		public decimal TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged("TotalCost");
					this.OnTotalCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPPODiscount", DbType="Decimal(18,2) NOT NULL")]
		public decimal TotalPPODiscount
		{
			get
			{
				return this._TotalPPODiscount;
			}
			set
			{
				if ((this._TotalPPODiscount != value))
				{
					this.OnTotalPPODiscountChanging(value);
					this.SendPropertyChanging();
					this._TotalPPODiscount = value;
					this.SendPropertyChanged("TotalPPODiscount");
					this.OnTotalPPODiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAppliedPayments", DbType="Decimal(18,2) NOT NULL")]
		public decimal TotalAppliedPayments
		{
			get
			{
				return this._TotalAppliedPayments;
			}
			set
			{
				if ((this._TotalAppliedPayments != value))
				{
					this.OnTotalAppliedPaymentsChanging(value);
					this.SendPropertyChanging();
					this._TotalAppliedPayments = value;
					this.SendPropertyChanged("TotalAppliedPayments");
					this.OnTotalAppliedPaymentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceDue", DbType="Decimal(18,2) NOT NULL")]
		public decimal BalanceDue
		{
			get
			{
				return this._BalanceDue;
			}
			set
			{
				if ((this._BalanceDue != value))
				{
					this.OnBalanceDueChanging(value);
					this.SendPropertyChanging();
					this._BalanceDue = value;
					this.SendPropertyChanged("BalanceDue");
					this.OnBalanceDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculatedInterest", DbType="Decimal(18,2) NOT NULL")]
		public decimal CalculatedInterest
		{
			get
			{
				return this._CalculatedInterest;
			}
			set
			{
				if ((this._CalculatedInterest != value))
				{
					this.OnCalculatedInterestChanging(value);
					this.SendPropertyChanging();
					this._CalculatedInterest = value;
					this.SendPropertyChanged("CalculatedInterest");
					this.OnCalculatedInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousCumulativeInterest", DbType="Decimal(18,2) NOT NULL")]
		public decimal PreviousCumulativeInterest
		{
			get
			{
				return this._PreviousCumulativeInterest;
			}
			set
			{
				if ((this._PreviousCumulativeInterest != value))
				{
					this.OnPreviousCumulativeInterestChanging(value);
					this.SendPropertyChanging();
					this._PreviousCumulativeInterest = value;
					this.SendPropertyChanged("PreviousCumulativeInterest");
					this.OnPreviousCumulativeInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewCumulativeInterest", DbType="Decimal(18,2) NOT NULL")]
		public decimal NewCumulativeInterest
		{
			get
			{
				return this._NewCumulativeInterest;
			}
			set
			{
				if ((this._NewCumulativeInterest != value))
				{
					this.OnNewCumulativeInterestChanging(value);
					this.SendPropertyChanging();
					this._NewCumulativeInterest = value;
					this.SendPropertyChanged("NewCumulativeInterest");
					this.OnNewCumulativeInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceInterestCalculationLog", Storage="_Invoice", ThisKey="InvoiceID", OtherKey="ID", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceInterestCalculationLogs.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceInterestCalculationLogs.Add(this);
						this._InvoiceID = value.ID;
					}
					else
					{
						this._InvoiceID = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoicePatient")]
	public partial class InvoicePatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PatientID;
		
		private bool _isActiveStatus;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _SSN;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _WorkPhone;
		
		private System.DateTime _DateOfBirth;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSSNChanging(string value);
    partial void OnSSNChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoicePatient()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Patient = default(EntityRef<Patient>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string SSN
		{
			get
			{
				return this._SSN;
			}
			set
			{
				if ((this._SSN != value))
				{
					this.OnSSNChanging(value);
					this.SendPropertyChanging();
					this._SSN = value;
					this.SendPropertyChanged("SSN");
					this.OnSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(500)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="VarChar(500)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoicePatient_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="InvoicePatientID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_InvoicePatient", Storage="_Patient", ThisKey="PatientID", OtherKey="ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.InvoicePatients.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.InvoicePatients.Add(this);
						this._PatientID = value.ID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoicePatient", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.InvoicePatients.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.InvoicePatients.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoicePatient = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoicePatient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoicePhysician")]
	public partial class InvoicePhysician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InvoiceContactListID;
		
		private int _PhysicianID;
		
		private bool _isActiveStatus;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _EmailAddress;
		
		private string _Notes;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<InvoiceContactList> _InvoiceContactList;
		
		private EntityRef<Physician> _Physician;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceContactListIDChanging(int value);
    partial void OnInvoiceContactListIDChanged();
    partial void OnPhysicianIDChanging(int value);
    partial void OnPhysicianIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoicePhysician()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._InvoiceContactList = default(EntityRef<InvoiceContactList>);
			this._Physician = default(EntityRef<Physician>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceContactListID", DbType="Int NOT NULL")]
		public int InvoiceContactListID
		{
			get
			{
				return this._InvoiceContactListID;
			}
			set
			{
				if ((this._InvoiceContactListID != value))
				{
					if (this._InvoiceContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceContactListIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceContactListID = value;
					this.SendPropertyChanged("InvoiceContactListID");
					this.OnInvoiceContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicianID", DbType="Int NOT NULL")]
		public int PhysicianID
		{
			get
			{
				return this._PhysicianID;
			}
			set
			{
				if ((this._PhysicianID != value))
				{
					if (this._Physician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicianIDChanging(value);
					this.SendPropertyChanging();
					this._PhysicianID = value;
					this.SendPropertyChanged("PhysicianID");
					this.OnPhysicianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(500)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(100)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoicePhysician_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="InvoicePhysicianID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoicePhysician", Storage="_InvoiceContactList", ThisKey="InvoiceContactListID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceContactList InvoiceContactList
		{
			get
			{
				return this._InvoiceContactList.Entity;
			}
			set
			{
				InvoiceContactList previousValue = this._InvoiceContactList.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceContactList.Entity = null;
						previousValue.InvoicePhysicians.Remove(this);
					}
					this._InvoiceContactList.Entity = value;
					if ((value != null))
					{
						value.InvoicePhysicians.Add(this);
						this._InvoiceContactListID = value.ID;
					}
					else
					{
						this._InvoiceContactListID = default(int);
					}
					this.SendPropertyChanged("InvoiceContactList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_InvoicePhysician", Storage="_Physician", ThisKey="PhysicianID", OtherKey="ID", IsForeignKey=true)]
		public Physician Physician
		{
			get
			{
				return this._Physician.Entity;
			}
			set
			{
				Physician previousValue = this._Physician.Entity;
				if (((previousValue != value) 
							|| (this._Physician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physician.Entity = null;
						previousValue.InvoicePhysicians.Remove(this);
					}
					this._Physician.Entity = value;
					if ((value != null))
					{
						value.InvoicePhysicians.Add(this);
						this._PhysicianID = value.ID;
					}
					else
					{
						this._PhysicianID = default(int);
					}
					this.SendPropertyChanged("Physician");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoicePhysician", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.InvoicePhysicians.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.InvoicePhysicians.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoicePhysician = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoicePhysician = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceProvider")]
	public partial class InvoiceProvider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InvoiceContactListID;
		
		private int _ProviderID;
		
		private bool _isActiveStatus;
		
		private string _Name;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Notes;
		
		private string _FacilityAbbreviation;
		
		private System.Nullable<decimal> _DiscountPercentage;
		
		private int _MRICostTypeID;
		
		private System.Nullable<decimal> _MRICostFlatRate;
		
		private System.Nullable<decimal> _MRICostPercentage;
		
		private System.Nullable<int> _DaysUntilPaymentDue;
		
		private System.Nullable<decimal> _Deposits;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<SurgeryInvoice_Provider> _SurgeryInvoice_Providers;
		
		private EntitySet<TestInvoice_Test> _TestInvoice_Tests;
		
		private EntityRef<InvoiceContactList> _InvoiceContactList;
		
		private EntityRef<MRICostType> _MRICostType;
		
		private EntityRef<Provider> _Provider;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceContactListIDChanging(int value);
    partial void OnInvoiceContactListIDChanged();
    partial void OnProviderIDChanging(int value);
    partial void OnProviderIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnFacilityAbbreviationChanging(string value);
    partial void OnFacilityAbbreviationChanged();
    partial void OnDiscountPercentageChanging(System.Nullable<decimal> value);
    partial void OnDiscountPercentageChanged();
    partial void OnMRICostTypeIDChanging(int value);
    partial void OnMRICostTypeIDChanged();
    partial void OnMRICostFlatRateChanging(System.Nullable<decimal> value);
    partial void OnMRICostFlatRateChanged();
    partial void OnMRICostPercentageChanging(System.Nullable<decimal> value);
    partial void OnMRICostPercentageChanged();
    partial void OnDaysUntilPaymentDueChanging(System.Nullable<int> value);
    partial void OnDaysUntilPaymentDueChanged();
    partial void OnDepositsChanging(System.Nullable<decimal> value);
    partial void OnDepositsChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoiceProvider()
		{
			this._SurgeryInvoice_Providers = new EntitySet<SurgeryInvoice_Provider>(new Action<SurgeryInvoice_Provider>(this.attach_SurgeryInvoice_Providers), new Action<SurgeryInvoice_Provider>(this.detach_SurgeryInvoice_Providers));
			this._TestInvoice_Tests = new EntitySet<TestInvoice_Test>(new Action<TestInvoice_Test>(this.attach_TestInvoice_Tests), new Action<TestInvoice_Test>(this.detach_TestInvoice_Tests));
			this._InvoiceContactList = default(EntityRef<InvoiceContactList>);
			this._MRICostType = default(EntityRef<MRICostType>);
			this._Provider = default(EntityRef<Provider>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceContactListID", DbType="Int NOT NULL")]
		public int InvoiceContactListID
		{
			get
			{
				return this._InvoiceContactListID;
			}
			set
			{
				if ((this._InvoiceContactListID != value))
				{
					if (this._InvoiceContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceContactListIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceContactListID = value;
					this.SendPropertyChanged("InvoiceContactListID");
					this.OnInvoiceContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderID", DbType="Int NOT NULL")]
		public int ProviderID
		{
			get
			{
				return this._ProviderID;
			}
			set
			{
				if ((this._ProviderID != value))
				{
					if (this._Provider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ProviderID = value;
					this.SendPropertyChanged("ProviderID");
					this.OnProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(500)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityAbbreviation", DbType="VarChar(50)")]
		public string FacilityAbbreviation
		{
			get
			{
				return this._FacilityAbbreviation;
			}
			set
			{
				if ((this._FacilityAbbreviation != value))
				{
					this.OnFacilityAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._FacilityAbbreviation = value;
					this.SendPropertyChanged("FacilityAbbreviation");
					this.OnFacilityAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountPercentage", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> DiscountPercentage
		{
			get
			{
				return this._DiscountPercentage;
			}
			set
			{
				if ((this._DiscountPercentage != value))
				{
					this.OnDiscountPercentageChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercentage = value;
					this.SendPropertyChanged("DiscountPercentage");
					this.OnDiscountPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRICostTypeID", DbType="Int NOT NULL")]
		public int MRICostTypeID
		{
			get
			{
				return this._MRICostTypeID;
			}
			set
			{
				if ((this._MRICostTypeID != value))
				{
					if (this._MRICostType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMRICostTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MRICostTypeID = value;
					this.SendPropertyChanged("MRICostTypeID");
					this.OnMRICostTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRICostFlatRate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> MRICostFlatRate
		{
			get
			{
				return this._MRICostFlatRate;
			}
			set
			{
				if ((this._MRICostFlatRate != value))
				{
					this.OnMRICostFlatRateChanging(value);
					this.SendPropertyChanging();
					this._MRICostFlatRate = value;
					this.SendPropertyChanged("MRICostFlatRate");
					this.OnMRICostFlatRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRICostPercentage", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> MRICostPercentage
		{
			get
			{
				return this._MRICostPercentage;
			}
			set
			{
				if ((this._MRICostPercentage != value))
				{
					this.OnMRICostPercentageChanging(value);
					this.SendPropertyChanging();
					this._MRICostPercentage = value;
					this.SendPropertyChanged("MRICostPercentage");
					this.OnMRICostPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysUntilPaymentDue", DbType="Int")]
		public System.Nullable<int> DaysUntilPaymentDue
		{
			get
			{
				return this._DaysUntilPaymentDue;
			}
			set
			{
				if ((this._DaysUntilPaymentDue != value))
				{
					this.OnDaysUntilPaymentDueChanging(value);
					this.SendPropertyChanging();
					this._DaysUntilPaymentDue = value;
					this.SendPropertyChanged("DaysUntilPaymentDue");
					this.OnDaysUntilPaymentDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deposits", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Deposits
		{
			get
			{
				return this._Deposits;
			}
			set
			{
				if ((this._Deposits != value))
				{
					this.OnDepositsChanging(value);
					this.SendPropertyChanging();
					this._Deposits = value;
					this.SendPropertyChanged("Deposits");
					this.OnDepositsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceProvider_SurgeryInvoice_Provider", Storage="_SurgeryInvoice_Providers", ThisKey="ID", OtherKey="InvoiceProviderID")]
		public EntitySet<SurgeryInvoice_Provider> SurgeryInvoice_Providers
		{
			get
			{
				return this._SurgeryInvoice_Providers;
			}
			set
			{
				this._SurgeryInvoice_Providers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceProvider_TestInvoice_Test", Storage="_TestInvoice_Tests", ThisKey="ID", OtherKey="InvoiceProviderID")]
		public EntitySet<TestInvoice_Test> TestInvoice_Tests
		{
			get
			{
				return this._TestInvoice_Tests;
			}
			set
			{
				this._TestInvoice_Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceContactList_InvoiceProvider", Storage="_InvoiceContactList", ThisKey="InvoiceContactListID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceContactList InvoiceContactList
		{
			get
			{
				return this._InvoiceContactList.Entity;
			}
			set
			{
				InvoiceContactList previousValue = this._InvoiceContactList.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceContactList.Entity = null;
						previousValue.InvoiceProviders.Remove(this);
					}
					this._InvoiceContactList.Entity = value;
					if ((value != null))
					{
						value.InvoiceProviders.Add(this);
						this._InvoiceContactListID = value.ID;
					}
					else
					{
						this._InvoiceContactListID = default(int);
					}
					this.SendPropertyChanged("InvoiceContactList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MRICostType_InvoiceProvider", Storage="_MRICostType", ThisKey="MRICostTypeID", OtherKey="ID", IsForeignKey=true)]
		public MRICostType MRICostType
		{
			get
			{
				return this._MRICostType.Entity;
			}
			set
			{
				MRICostType previousValue = this._MRICostType.Entity;
				if (((previousValue != value) 
							|| (this._MRICostType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MRICostType.Entity = null;
						previousValue.InvoiceProviders.Remove(this);
					}
					this._MRICostType.Entity = value;
					if ((value != null))
					{
						value.InvoiceProviders.Add(this);
						this._MRICostTypeID = value.ID;
					}
					else
					{
						this._MRICostTypeID = default(int);
					}
					this.SendPropertyChanged("MRICostType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_InvoiceProvider", Storage="_Provider", ThisKey="ProviderID", OtherKey="ID", IsForeignKey=true)]
		public Provider Provider
		{
			get
			{
				return this._Provider.Entity;
			}
			set
			{
				Provider previousValue = this._Provider.Entity;
				if (((previousValue != value) 
							|| (this._Provider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Provider.Entity = null;
						previousValue.InvoiceProviders.Remove(this);
					}
					this._Provider.Entity = value;
					if ((value != null))
					{
						value.InvoiceProviders.Add(this);
						this._ProviderID = value.ID;
					}
					else
					{
						this._ProviderID = default(int);
					}
					this.SendPropertyChanged("Provider");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoiceProvider", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.InvoiceProviders.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.InvoiceProviders.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurgeryInvoice_Providers(SurgeryInvoice_Provider entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceProvider = this;
		}
		
		private void detach_SurgeryInvoice_Providers(SurgeryInvoice_Provider entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceProvider = null;
		}
		
		private void attach_TestInvoice_Tests(TestInvoice_Test entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceProvider = this;
		}
		
		private void detach_TestInvoice_Tests(TestInvoice_Test entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceProvider = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceStatusType")]
	public partial class InvoiceStatusType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoiceStatusType()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceStatusType_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="InvoiceStatusTypeID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceStatusType = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceStatusType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceType")]
	public partial class InvoiceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public InvoiceType()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceType_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="InvoiceTypeID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceType = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoanTerms")]
	public partial class LoanTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private decimal _Testing_YearlyInterest;
		
		private int _Testing_LoanTermMonths;
		
		private int _Testing_ServiceFeeWaivedMonths;
		
		private decimal _Surgery_YearlyInterest;
		
		private int _Surgery_LoanTermMonths;
		
		private int _Surgery_ServiceFeeWaivedMonths;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnTesting_YearlyInterestChanging(decimal value);
    partial void OnTesting_YearlyInterestChanged();
    partial void OnTesting_LoanTermMonthsChanging(int value);
    partial void OnTesting_LoanTermMonthsChanged();
    partial void OnTesting_ServiceFeeWaivedMonthsChanging(int value);
    partial void OnTesting_ServiceFeeWaivedMonthsChanged();
    partial void OnSurgery_YearlyInterestChanging(decimal value);
    partial void OnSurgery_YearlyInterestChanged();
    partial void OnSurgery_LoanTermMonthsChanging(int value);
    partial void OnSurgery_LoanTermMonthsChanged();
    partial void OnSurgery_ServiceFeeWaivedMonthsChanging(int value);
    partial void OnSurgery_ServiceFeeWaivedMonthsChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public LoanTerm()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Testing_YearlyInterest", DbType="Decimal(18,4) NOT NULL")]
		public decimal Testing_YearlyInterest
		{
			get
			{
				return this._Testing_YearlyInterest;
			}
			set
			{
				if ((this._Testing_YearlyInterest != value))
				{
					this.OnTesting_YearlyInterestChanging(value);
					this.SendPropertyChanging();
					this._Testing_YearlyInterest = value;
					this.SendPropertyChanged("Testing_YearlyInterest");
					this.OnTesting_YearlyInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Testing_LoanTermMonths", DbType="Int NOT NULL")]
		public int Testing_LoanTermMonths
		{
			get
			{
				return this._Testing_LoanTermMonths;
			}
			set
			{
				if ((this._Testing_LoanTermMonths != value))
				{
					this.OnTesting_LoanTermMonthsChanging(value);
					this.SendPropertyChanging();
					this._Testing_LoanTermMonths = value;
					this.SendPropertyChanged("Testing_LoanTermMonths");
					this.OnTesting_LoanTermMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Testing_ServiceFeeWaivedMonths", DbType="Int NOT NULL")]
		public int Testing_ServiceFeeWaivedMonths
		{
			get
			{
				return this._Testing_ServiceFeeWaivedMonths;
			}
			set
			{
				if ((this._Testing_ServiceFeeWaivedMonths != value))
				{
					this.OnTesting_ServiceFeeWaivedMonthsChanging(value);
					this.SendPropertyChanging();
					this._Testing_ServiceFeeWaivedMonths = value;
					this.SendPropertyChanged("Testing_ServiceFeeWaivedMonths");
					this.OnTesting_ServiceFeeWaivedMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surgery_YearlyInterest", DbType="Decimal(18,4) NOT NULL")]
		public decimal Surgery_YearlyInterest
		{
			get
			{
				return this._Surgery_YearlyInterest;
			}
			set
			{
				if ((this._Surgery_YearlyInterest != value))
				{
					this.OnSurgery_YearlyInterestChanging(value);
					this.SendPropertyChanging();
					this._Surgery_YearlyInterest = value;
					this.SendPropertyChanged("Surgery_YearlyInterest");
					this.OnSurgery_YearlyInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surgery_LoanTermMonths", DbType="Int NOT NULL")]
		public int Surgery_LoanTermMonths
		{
			get
			{
				return this._Surgery_LoanTermMonths;
			}
			set
			{
				if ((this._Surgery_LoanTermMonths != value))
				{
					this.OnSurgery_LoanTermMonthsChanging(value);
					this.SendPropertyChanging();
					this._Surgery_LoanTermMonths = value;
					this.SendPropertyChanged("Surgery_LoanTermMonths");
					this.OnSurgery_LoanTermMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surgery_ServiceFeeWaivedMonths", DbType="Int NOT NULL")]
		public int Surgery_ServiceFeeWaivedMonths
		{
			get
			{
				return this._Surgery_ServiceFeeWaivedMonths;
			}
			set
			{
				if ((this._Surgery_ServiceFeeWaivedMonths != value))
				{
					this.OnSurgery_ServiceFeeWaivedMonthsChanging(value);
					this.SendPropertyChanging();
					this._Surgery_ServiceFeeWaivedMonths = value;
					this.SendPropertyChanged("Surgery_ServiceFeeWaivedMonths");
					this.OnSurgery_ServiceFeeWaivedMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_LoanTerm", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.LoanTerms.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.LoanTerms.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MRICostType")]
	public partial class MRICostType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<InvoiceProvider> _InvoiceProviders;
		
		private EntitySet<Provider> _Providers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public MRICostType()
		{
			this._InvoiceProviders = new EntitySet<InvoiceProvider>(new Action<InvoiceProvider>(this.attach_InvoiceProviders), new Action<InvoiceProvider>(this.detach_InvoiceProviders));
			this._Providers = new EntitySet<Provider>(new Action<Provider>(this.attach_Providers), new Action<Provider>(this.detach_Providers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MRICostType_InvoiceProvider", Storage="_InvoiceProviders", ThisKey="ID", OtherKey="MRICostTypeID")]
		public EntitySet<InvoiceProvider> InvoiceProviders
		{
			get
			{
				return this._InvoiceProviders;
			}
			set
			{
				this._InvoiceProviders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MRICostType_Provider", Storage="_Providers", ThisKey="ID", OtherKey="MRICostTypeID")]
		public EntitySet<Provider> Providers
		{
			get
			{
				return this._Providers;
			}
			set
			{
				this._Providers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceProviders(InvoiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.MRICostType = this;
		}
		
		private void detach_InvoiceProviders(InvoiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.MRICostType = null;
		}
		
		private void attach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.MRICostType = this;
		}
		
		private void detach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.MRICostType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private bool _isActiveStatus;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _SSN;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _WorkPhone;
		
		private System.DateTime _DateOfBirth;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private EntitySet<InvoicePatient> _InvoicePatients;
		
		private EntitySet<PatientChangeLog> _PatientChangeLogs;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSSNChanging(string value);
    partial void OnSSNChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Patient()
		{
			this._InvoicePatients = new EntitySet<InvoicePatient>(new Action<InvoicePatient>(this.attach_InvoicePatients), new Action<InvoicePatient>(this.detach_InvoicePatients));
			this._PatientChangeLogs = new EntitySet<PatientChangeLog>(new Action<PatientChangeLog>(this.attach_PatientChangeLogs), new Action<PatientChangeLog>(this.detach_PatientChangeLogs));
			this._Company = default(EntityRef<Company>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string SSN
		{
			get
			{
				return this._SSN;
			}
			set
			{
				if ((this._SSN != value))
				{
					this.OnSSNChanging(value);
					this.SendPropertyChanging();
					this._SSN = value;
					this.SendPropertyChanged("SSN");
					this.OnSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(500)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="VarChar(500)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_InvoicePatient", Storage="_InvoicePatients", ThisKey="ID", OtherKey="PatientID")]
		public EntitySet<InvoicePatient> InvoicePatients
		{
			get
			{
				return this._InvoicePatients;
			}
			set
			{
				this._InvoicePatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientChangeLog", Storage="_PatientChangeLogs", ThisKey="ID", OtherKey="PatientID")]
		public EntitySet<PatientChangeLog> PatientChangeLogs
		{
			get
			{
				return this._PatientChangeLogs;
			}
			set
			{
				this._PatientChangeLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Patient", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Patient", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoicePatients(InvoicePatient entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_InvoicePatients(InvoicePatient entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_PatientChangeLogs(PatientChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_PatientChangeLogs(PatientChangeLog entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientChangeLog")]
	public partial class PatientChangeLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PatientID;
		
		private int _UserID;
		
		private string _InformationUpdated;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnInformationUpdatedChanging(string value);
    partial void OnInformationUpdatedChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public PatientChangeLog()
		{
			this._Patient = default(EntityRef<Patient>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformationUpdated", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string InformationUpdated
		{
			get
			{
				return this._InformationUpdated;
			}
			set
			{
				if ((this._InformationUpdated != value))
				{
					this.OnInformationUpdatedChanging(value);
					this.SendPropertyChanging();
					this._InformationUpdated = value;
					this.SendPropertyChanged("InformationUpdated");
					this.OnInformationUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientChangeLog", Storage="_Patient", ThisKey="PatientID", OtherKey="ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.PatientChangeLogs.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.PatientChangeLogs.Add(this);
						this._PatientID = value.ID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PatientChangeLog", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PatientChangeLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PatientChangeLogs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payments")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InvoiceID;
		
		private int _PaymentTypeID;
		
		private System.DateTime _DatePaid;
		
		private decimal _Amount;
		
		private string _CheckNumber;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<PaymentType> _PaymentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceIDChanging(int value);
    partial void OnInvoiceIDChanged();
    partial void OnPaymentTypeIDChanging(int value);
    partial void OnPaymentTypeIDChanged();
    partial void OnDatePaidChanging(System.DateTime value);
    partial void OnDatePaidChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnCheckNumberChanging(string value);
    partial void OnCheckNumberChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Payment()
		{
			this._Invoice = default(EntityRef<Invoice>);
			this._PaymentType = default(EntityRef<PaymentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="Int NOT NULL")]
		public int InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeID", DbType="Int NOT NULL")]
		public int PaymentTypeID
		{
			get
			{
				return this._PaymentTypeID;
			}
			set
			{
				if ((this._PaymentTypeID != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeID = value;
					this.SendPropertyChanged("PaymentTypeID");
					this.OnPaymentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePaid", DbType="DateTime NOT NULL")]
		public System.DateTime DatePaid
		{
			get
			{
				return this._DatePaid;
			}
			set
			{
				if ((this._DatePaid != value))
				{
					this.OnDatePaidChanging(value);
					this.SendPropertyChanging();
					this._DatePaid = value;
					this.SendPropertyChanged("DatePaid");
					this.OnDatePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CheckNumber
		{
			get
			{
				return this._CheckNumber;
			}
			set
			{
				if ((this._CheckNumber != value))
				{
					this.OnCheckNumberChanging(value);
					this.SendPropertyChanging();
					this._CheckNumber = value;
					this.SendPropertyChanged("CheckNumber");
					this.OnCheckNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Payment", Storage="_Invoice", ThisKey="InvoiceID", OtherKey="ID", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._InvoiceID = value.ID;
					}
					else
					{
						this._InvoiceID = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Payment", Storage="_PaymentType", ThisKey="PaymentTypeID", OtherKey="ID", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._PaymentTypeID = value.ID;
					}
					else
					{
						this._PaymentTypeID = default(int);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentType")]
	public partial class PaymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<SurgeryInvoice_Provider_Payment> _SurgeryInvoice_Provider_Payments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public PaymentType()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._SurgeryInvoice_Provider_Payments = new EntitySet<SurgeryInvoice_Provider_Payment>(new Action<SurgeryInvoice_Provider_Payment>(this.attach_SurgeryInvoice_Provider_Payments), new Action<SurgeryInvoice_Provider_Payment>(this.detach_SurgeryInvoice_Provider_Payments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Payment", Storage="_Payments", ThisKey="ID", OtherKey="PaymentTypeID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_SurgeryInvoice_Provider_Payment", Storage="_SurgeryInvoice_Provider_Payments", ThisKey="ID", OtherKey="PaymentTypeID")]
		public EntitySet<SurgeryInvoice_Provider_Payment> SurgeryInvoice_Provider_Payments
		{
			get
			{
				return this._SurgeryInvoice_Provider_Payments;
			}
			set
			{
				this._SurgeryInvoice_Provider_Payments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
		
		private void attach_SurgeryInvoice_Provider_Payments(SurgeryInvoice_Provider_Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_SurgeryInvoice_Provider_Payments(SurgeryInvoice_Provider_Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<UserPermission> _UserPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Permission()
		{
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UserPermission", Storage="_UserPermissions", ThisKey="ID", OtherKey="PermissionID")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Physician")]
	public partial class Physician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ContactListID;
		
		private bool _isActiveStatus;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _EmailAddress;
		
		private string _Notes;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<InvoicePhysician> _InvoicePhysicians;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ContactList> _ContactList;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnContactListIDChanging(int value);
    partial void OnContactListIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Physician()
		{
			this._InvoicePhysicians = new EntitySet<InvoicePhysician>(new Action<InvoicePhysician>(this.attach_InvoicePhysicians), new Action<InvoicePhysician>(this.detach_InvoicePhysicians));
			this._Company = default(EntityRef<Company>);
			this._ContactList = default(EntityRef<ContactList>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactListID", DbType="Int NOT NULL")]
		public int ContactListID
		{
			get
			{
				return this._ContactListID;
			}
			set
			{
				if ((this._ContactListID != value))
				{
					if (this._ContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactListIDChanging(value);
					this.SendPropertyChanging();
					this._ContactListID = value;
					this.SendPropertyChanged("ContactListID");
					this.OnContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(500)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(100)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_InvoicePhysician", Storage="_InvoicePhysicians", ThisKey="ID", OtherKey="PhysicianID")]
		public EntitySet<InvoicePhysician> InvoicePhysicians
		{
			get
			{
				return this._InvoicePhysicians;
			}
			set
			{
				this._InvoicePhysicians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Physician", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Physicians.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Physicians.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Physician", Storage="_ContactList", ThisKey="ContactListID", OtherKey="ID", IsForeignKey=true)]
		public ContactList ContactList
		{
			get
			{
				return this._ContactList.Entity;
			}
			set
			{
				ContactList previousValue = this._ContactList.Entity;
				if (((previousValue != value) 
							|| (this._ContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactList.Entity = null;
						previousValue.Physicians.Remove(this);
					}
					this._ContactList.Entity = value;
					if ((value != null))
					{
						value.Physicians.Add(this);
						this._ContactListID = value.ID;
					}
					else
					{
						this._ContactListID = default(int);
					}
					this.SendPropertyChanged("ContactList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Physician", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Physicians.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Physicians.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoicePhysicians(InvoicePhysician entity)
		{
			this.SendPropertyChanging();
			entity.Physician = this;
		}
		
		private void detach_InvoicePhysicians(InvoicePhysician entity)
		{
			this.SendPropertyChanging();
			entity.Physician = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Provider")]
	public partial class Provider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ContactListID;
		
		private bool _isActiveStatus;
		
		private string _Name;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private int _StateID;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Notes;
		
		private string _FacilityAbbreviation;
		
		private System.Nullable<decimal> _DiscountPercentage;
		
		private int _MRICostTypeID;
		
		private System.Nullable<decimal> _MRICostFlatRate;
		
		private System.Nullable<decimal> _MRICostPercentage;
		
		private System.Nullable<int> _DaysUntilPaymentDue;
		
		private System.Nullable<decimal> _Deposits;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private string _Street1_Billing;
		
		private string _Street2_Billing;
		
		private string _City_Billing;
		
		private System.Nullable<int> _StateID_Billing;
		
		private string _ZipCode_Billing;
		
		private string _Phone_Billing;
		
		private string _Fax_Billing;
		
		private string _Email_Billing;
		
		private string _TaxID;
		
		private EntitySet<InvoiceProvider> _InvoiceProviders;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ContactList> _ContactList;
		
		private EntityRef<MRICostType> _MRICostType;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnContactListIDChanging(int value);
    partial void OnContactListIDChanged();
    partial void OnisActiveStatusChanging(bool value);
    partial void OnisActiveStatusChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnFacilityAbbreviationChanging(string value);
    partial void OnFacilityAbbreviationChanged();
    partial void OnDiscountPercentageChanging(System.Nullable<decimal> value);
    partial void OnDiscountPercentageChanged();
    partial void OnMRICostTypeIDChanging(int value);
    partial void OnMRICostTypeIDChanged();
    partial void OnMRICostFlatRateChanging(System.Nullable<decimal> value);
    partial void OnMRICostFlatRateChanged();
    partial void OnMRICostPercentageChanging(System.Nullable<decimal> value);
    partial void OnMRICostPercentageChanged();
    partial void OnDaysUntilPaymentDueChanging(System.Nullable<int> value);
    partial void OnDaysUntilPaymentDueChanged();
    partial void OnDepositsChanging(System.Nullable<decimal> value);
    partial void OnDepositsChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnStreet1_BillingChanging(string value);
    partial void OnStreet1_BillingChanged();
    partial void OnStreet2_BillingChanging(string value);
    partial void OnStreet2_BillingChanged();
    partial void OnCity_BillingChanging(string value);
    partial void OnCity_BillingChanged();
    partial void OnStateID_BillingChanging(System.Nullable<int> value);
    partial void OnStateID_BillingChanged();
    partial void OnZipCode_BillingChanging(string value);
    partial void OnZipCode_BillingChanged();
    partial void OnPhone_BillingChanging(string value);
    partial void OnPhone_BillingChanged();
    partial void OnFax_BillingChanging(string value);
    partial void OnFax_BillingChanged();
    partial void OnEmail_BillingChanging(string value);
    partial void OnEmail_BillingChanged();
    partial void OnTaxIDChanging(string value);
    partial void OnTaxIDChanged();
    #endregion
		
		public Provider()
		{
			this._InvoiceProviders = new EntitySet<InvoiceProvider>(new Action<InvoiceProvider>(this.attach_InvoiceProviders), new Action<InvoiceProvider>(this.detach_InvoiceProviders));
			this._Company = default(EntityRef<Company>);
			this._ContactList = default(EntityRef<ContactList>);
			this._MRICostType = default(EntityRef<MRICostType>);
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactListID", DbType="Int NOT NULL")]
		public int ContactListID
		{
			get
			{
				return this._ContactListID;
			}
			set
			{
				if ((this._ContactListID != value))
				{
					if (this._ContactList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactListIDChanging(value);
					this.SendPropertyChanging();
					this._ContactListID = value;
					this.SendPropertyChanged("ContactListID");
					this.OnContactListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActiveStatus", DbType="Bit NOT NULL")]
		public bool isActiveStatus
		{
			get
			{
				return this._isActiveStatus;
			}
			set
			{
				if ((this._isActiveStatus != value))
				{
					this.OnisActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._isActiveStatus = value;
					this.SendPropertyChanged("isActiveStatus");
					this.OnisActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2", DbType="VarChar(500)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityAbbreviation", DbType="VarChar(50)")]
		public string FacilityAbbreviation
		{
			get
			{
				return this._FacilityAbbreviation;
			}
			set
			{
				if ((this._FacilityAbbreviation != value))
				{
					this.OnFacilityAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._FacilityAbbreviation = value;
					this.SendPropertyChanged("FacilityAbbreviation");
					this.OnFacilityAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountPercentage", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> DiscountPercentage
		{
			get
			{
				return this._DiscountPercentage;
			}
			set
			{
				if ((this._DiscountPercentage != value))
				{
					this.OnDiscountPercentageChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercentage = value;
					this.SendPropertyChanged("DiscountPercentage");
					this.OnDiscountPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRICostTypeID", DbType="Int NOT NULL")]
		public int MRICostTypeID
		{
			get
			{
				return this._MRICostTypeID;
			}
			set
			{
				if ((this._MRICostTypeID != value))
				{
					if (this._MRICostType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMRICostTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MRICostTypeID = value;
					this.SendPropertyChanged("MRICostTypeID");
					this.OnMRICostTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRICostFlatRate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> MRICostFlatRate
		{
			get
			{
				return this._MRICostFlatRate;
			}
			set
			{
				if ((this._MRICostFlatRate != value))
				{
					this.OnMRICostFlatRateChanging(value);
					this.SendPropertyChanging();
					this._MRICostFlatRate = value;
					this.SendPropertyChanged("MRICostFlatRate");
					this.OnMRICostFlatRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRICostPercentage", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> MRICostPercentage
		{
			get
			{
				return this._MRICostPercentage;
			}
			set
			{
				if ((this._MRICostPercentage != value))
				{
					this.OnMRICostPercentageChanging(value);
					this.SendPropertyChanging();
					this._MRICostPercentage = value;
					this.SendPropertyChanged("MRICostPercentage");
					this.OnMRICostPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysUntilPaymentDue", DbType="Int")]
		public System.Nullable<int> DaysUntilPaymentDue
		{
			get
			{
				return this._DaysUntilPaymentDue;
			}
			set
			{
				if ((this._DaysUntilPaymentDue != value))
				{
					this.OnDaysUntilPaymentDueChanging(value);
					this.SendPropertyChanging();
					this._DaysUntilPaymentDue = value;
					this.SendPropertyChanged("DaysUntilPaymentDue");
					this.OnDaysUntilPaymentDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deposits", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Deposits
		{
			get
			{
				return this._Deposits;
			}
			set
			{
				if ((this._Deposits != value))
				{
					this.OnDepositsChanging(value);
					this.SendPropertyChanging();
					this._Deposits = value;
					this.SendPropertyChanged("Deposits");
					this.OnDepositsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street1_Billing", DbType="VarChar(500)")]
		public string Street1_Billing
		{
			get
			{
				return this._Street1_Billing;
			}
			set
			{
				if ((this._Street1_Billing != value))
				{
					this.OnStreet1_BillingChanging(value);
					this.SendPropertyChanging();
					this._Street1_Billing = value;
					this.SendPropertyChanged("Street1_Billing");
					this.OnStreet1_BillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street2_Billing", DbType="VarChar(500)")]
		public string Street2_Billing
		{
			get
			{
				return this._Street2_Billing;
			}
			set
			{
				if ((this._Street2_Billing != value))
				{
					this.OnStreet2_BillingChanging(value);
					this.SendPropertyChanging();
					this._Street2_Billing = value;
					this.SendPropertyChanged("Street2_Billing");
					this.OnStreet2_BillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_Billing", DbType="VarChar(500)")]
		public string City_Billing
		{
			get
			{
				return this._City_Billing;
			}
			set
			{
				if ((this._City_Billing != value))
				{
					this.OnCity_BillingChanging(value);
					this.SendPropertyChanging();
					this._City_Billing = value;
					this.SendPropertyChanged("City_Billing");
					this.OnCity_BillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID_Billing", DbType="Int")]
		public System.Nullable<int> StateID_Billing
		{
			get
			{
				return this._StateID_Billing;
			}
			set
			{
				if ((this._StateID_Billing != value))
				{
					this.OnStateID_BillingChanging(value);
					this.SendPropertyChanging();
					this._StateID_Billing = value;
					this.SendPropertyChanged("StateID_Billing");
					this.OnStateID_BillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode_Billing", DbType="VarChar(500)")]
		public string ZipCode_Billing
		{
			get
			{
				return this._ZipCode_Billing;
			}
			set
			{
				if ((this._ZipCode_Billing != value))
				{
					this.OnZipCode_BillingChanging(value);
					this.SendPropertyChanging();
					this._ZipCode_Billing = value;
					this.SendPropertyChanged("ZipCode_Billing");
					this.OnZipCode_BillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_Billing", DbType="VarChar(50)")]
		public string Phone_Billing
		{
			get
			{
				return this._Phone_Billing;
			}
			set
			{
				if ((this._Phone_Billing != value))
				{
					this.OnPhone_BillingChanging(value);
					this.SendPropertyChanging();
					this._Phone_Billing = value;
					this.SendPropertyChanged("Phone_Billing");
					this.OnPhone_BillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax_Billing", DbType="VarChar(50)")]
		public string Fax_Billing
		{
			get
			{
				return this._Fax_Billing;
			}
			set
			{
				if ((this._Fax_Billing != value))
				{
					this.OnFax_BillingChanging(value);
					this.SendPropertyChanging();
					this._Fax_Billing = value;
					this.SendPropertyChanged("Fax_Billing");
					this.OnFax_BillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_Billing", DbType="VarChar(100)")]
		public string Email_Billing
		{
			get
			{
				return this._Email_Billing;
			}
			set
			{
				if ((this._Email_Billing != value))
				{
					this.OnEmail_BillingChanging(value);
					this.SendPropertyChanging();
					this._Email_Billing = value;
					this.SendPropertyChanged("Email_Billing");
					this.OnEmail_BillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxID", DbType="VarChar(50)")]
		public string TaxID
		{
			get
			{
				return this._TaxID;
			}
			set
			{
				if ((this._TaxID != value))
				{
					this.OnTaxIDChanging(value);
					this.SendPropertyChanging();
					this._TaxID = value;
					this.SendPropertyChanged("TaxID");
					this.OnTaxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_InvoiceProvider", Storage="_InvoiceProviders", ThisKey="ID", OtherKey="ProviderID")]
		public EntitySet<InvoiceProvider> InvoiceProviders
		{
			get
			{
				return this._InvoiceProviders;
			}
			set
			{
				this._InvoiceProviders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Provider", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Providers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Providers.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactList_Provider", Storage="_ContactList", ThisKey="ContactListID", OtherKey="ID", IsForeignKey=true)]
		public ContactList ContactList
		{
			get
			{
				return this._ContactList.Entity;
			}
			set
			{
				ContactList previousValue = this._ContactList.Entity;
				if (((previousValue != value) 
							|| (this._ContactList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactList.Entity = null;
						previousValue.Providers.Remove(this);
					}
					this._ContactList.Entity = value;
					if ((value != null))
					{
						value.Providers.Add(this);
						this._ContactListID = value.ID;
					}
					else
					{
						this._ContactListID = default(int);
					}
					this.SendPropertyChanged("ContactList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MRICostType_Provider", Storage="_MRICostType", ThisKey="MRICostTypeID", OtherKey="ID", IsForeignKey=true)]
		public MRICostType MRICostType
		{
			get
			{
				return this._MRICostType.Entity;
			}
			set
			{
				MRICostType previousValue = this._MRICostType.Entity;
				if (((previousValue != value) 
							|| (this._MRICostType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MRICostType.Entity = null;
						previousValue.Providers.Remove(this);
					}
					this._MRICostType.Entity = value;
					if ((value != null))
					{
						value.Providers.Add(this);
						this._MRICostTypeID = value.ID;
					}
					else
					{
						this._MRICostTypeID = default(int);
					}
					this.SendPropertyChanged("MRICostType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Provider", Storage="_State", ThisKey="StateID", OtherKey="ID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Providers.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Providers.Add(this);
						this._StateID = value.ID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceProviders(InvoiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.Provider = this;
		}
		
		private void detach_InvoiceProviders(InvoiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.Provider = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Abbreviation;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Attorney> _Attorneys;
		
		private EntitySet<Firm> _Firms;
		
		private EntitySet<InvoiceAttorney> _InvoiceAttorneys;
		
		private EntitySet<InvoiceFirm> _InvoiceFirms;
		
		private EntitySet<InvoicePatient> _InvoicePatients;
		
		private EntitySet<InvoicePhysician> _InvoicePhysicians;
		
		private EntitySet<InvoiceProvider> _InvoiceProviders;
		
		private EntitySet<Patient> _Patients;
		
		private EntitySet<Physician> _Physicians;
		
		private EntitySet<Provider> _Providers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public State()
		{
			this._Attorneys = new EntitySet<Attorney>(new Action<Attorney>(this.attach_Attorneys), new Action<Attorney>(this.detach_Attorneys));
			this._Firms = new EntitySet<Firm>(new Action<Firm>(this.attach_Firms), new Action<Firm>(this.detach_Firms));
			this._InvoiceAttorneys = new EntitySet<InvoiceAttorney>(new Action<InvoiceAttorney>(this.attach_InvoiceAttorneys), new Action<InvoiceAttorney>(this.detach_InvoiceAttorneys));
			this._InvoiceFirms = new EntitySet<InvoiceFirm>(new Action<InvoiceFirm>(this.attach_InvoiceFirms), new Action<InvoiceFirm>(this.detach_InvoiceFirms));
			this._InvoicePatients = new EntitySet<InvoicePatient>(new Action<InvoicePatient>(this.attach_InvoicePatients), new Action<InvoicePatient>(this.detach_InvoicePatients));
			this._InvoicePhysicians = new EntitySet<InvoicePhysician>(new Action<InvoicePhysician>(this.attach_InvoicePhysicians), new Action<InvoicePhysician>(this.detach_InvoicePhysicians));
			this._InvoiceProviders = new EntitySet<InvoiceProvider>(new Action<InvoiceProvider>(this.attach_InvoiceProviders), new Action<InvoiceProvider>(this.detach_InvoiceProviders));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Physicians = new EntitySet<Physician>(new Action<Physician>(this.attach_Physicians), new Action<Physician>(this.detach_Physicians));
			this._Providers = new EntitySet<Provider>(new Action<Provider>(this.attach_Providers), new Action<Provider>(this.detach_Providers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Attorney", Storage="_Attorneys", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<Attorney> Attorneys
		{
			get
			{
				return this._Attorneys;
			}
			set
			{
				this._Attorneys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Firm", Storage="_Firms", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<Firm> Firms
		{
			get
			{
				return this._Firms;
			}
			set
			{
				this._Firms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoiceAttorney", Storage="_InvoiceAttorneys", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<InvoiceAttorney> InvoiceAttorneys
		{
			get
			{
				return this._InvoiceAttorneys;
			}
			set
			{
				this._InvoiceAttorneys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoiceFirm", Storage="_InvoiceFirms", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<InvoiceFirm> InvoiceFirms
		{
			get
			{
				return this._InvoiceFirms;
			}
			set
			{
				this._InvoiceFirms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoicePatient", Storage="_InvoicePatients", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<InvoicePatient> InvoicePatients
		{
			get
			{
				return this._InvoicePatients;
			}
			set
			{
				this._InvoicePatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoicePhysician", Storage="_InvoicePhysicians", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<InvoicePhysician> InvoicePhysicians
		{
			get
			{
				return this._InvoicePhysicians;
			}
			set
			{
				this._InvoicePhysicians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_InvoiceProvider", Storage="_InvoiceProviders", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<InvoiceProvider> InvoiceProviders
		{
			get
			{
				return this._InvoiceProviders;
			}
			set
			{
				this._InvoiceProviders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Patient", Storage="_Patients", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Physician", Storage="_Physicians", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<Physician> Physicians
		{
			get
			{
				return this._Physicians;
			}
			set
			{
				this._Physicians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Provider", Storage="_Providers", ThisKey="ID", OtherKey="StateID")]
		public EntitySet<Provider> Providers
		{
			get
			{
				return this._Providers;
			}
			set
			{
				this._Providers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attorneys(Attorney entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Attorneys(Attorney entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Firms(Firm entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Firms(Firm entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_InvoiceAttorneys(InvoiceAttorney entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_InvoiceAttorneys(InvoiceAttorney entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_InvoiceFirms(InvoiceFirm entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_InvoiceFirms(InvoiceFirm entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_InvoicePatients(InvoicePatient entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_InvoicePatients(InvoicePatient entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_InvoicePhysicians(InvoicePhysician entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_InvoicePhysicians(InvoicePhysician entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_InvoiceProviders(InvoiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_InvoiceProviders(InvoiceProvider entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Physicians(Physician entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Physicians(Physician entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Surgery")]
	public partial class Surgery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<SurgeryInvoice_Surgery> _SurgeryInvoice_Surgeries;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Surgery()
		{
			this._SurgeryInvoice_Surgeries = new EntitySet<SurgeryInvoice_Surgery>(new Action<SurgeryInvoice_Surgery>(this.attach_SurgeryInvoice_Surgeries), new Action<SurgeryInvoice_Surgery>(this.detach_SurgeryInvoice_Surgeries));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Surgery_SurgeryInvoice_Surgery", Storage="_SurgeryInvoice_Surgeries", ThisKey="ID", OtherKey="SurgeryID")]
		public EntitySet<SurgeryInvoice_Surgery> SurgeryInvoice_Surgeries
		{
			get
			{
				return this._SurgeryInvoice_Surgeries;
			}
			set
			{
				this._SurgeryInvoice_Surgeries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Surgery", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Surgeries.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Surgeries.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurgeryInvoice_Surgeries(SurgeryInvoice_Surgery entity)
		{
			this.SendPropertyChanging();
			entity.Surgery = this;
		}
		
		private void detach_SurgeryInvoice_Surgeries(SurgeryInvoice_Surgery entity)
		{
			this.SendPropertyChanging();
			entity.Surgery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurgeryInvoice")]
	public partial class SurgeryInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<SurgeryInvoice_Provider> _SurgeryInvoice_Providers;
		
		private EntitySet<SurgeryInvoice_Surgery> _SurgeryInvoice_Surgeries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public SurgeryInvoice()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._SurgeryInvoice_Providers = new EntitySet<SurgeryInvoice_Provider>(new Action<SurgeryInvoice_Provider>(this.attach_SurgeryInvoice_Providers), new Action<SurgeryInvoice_Provider>(this.detach_SurgeryInvoice_Providers));
			this._SurgeryInvoice_Surgeries = new EntitySet<SurgeryInvoice_Surgery>(new Action<SurgeryInvoice_Surgery>(this.attach_SurgeryInvoice_Surgeries), new Action<SurgeryInvoice_Surgery>(this.detach_SurgeryInvoice_Surgeries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="SurgeryInvoiceID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_SurgeryInvoice_Provider", Storage="_SurgeryInvoice_Providers", ThisKey="ID", OtherKey="SurgeryInvoiceID")]
		public EntitySet<SurgeryInvoice_Provider> SurgeryInvoice_Providers
		{
			get
			{
				return this._SurgeryInvoice_Providers;
			}
			set
			{
				this._SurgeryInvoice_Providers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_SurgeryInvoice_Surgery", Storage="_SurgeryInvoice_Surgeries", ThisKey="ID", OtherKey="SurgeryInvoiceID")]
		public EntitySet<SurgeryInvoice_Surgery> SurgeryInvoice_Surgeries
		{
			get
			{
				return this._SurgeryInvoice_Surgeries;
			}
			set
			{
				this._SurgeryInvoice_Surgeries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice = null;
		}
		
		private void attach_SurgeryInvoice_Providers(SurgeryInvoice_Provider entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice = this;
		}
		
		private void detach_SurgeryInvoice_Providers(SurgeryInvoice_Provider entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice = null;
		}
		
		private void attach_SurgeryInvoice_Surgeries(SurgeryInvoice_Surgery entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice = this;
		}
		
		private void detach_SurgeryInvoice_Surgeries(SurgeryInvoice_Surgery entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurgeryInvoice_Provider_CPTCodes")]
	public partial class SurgeryInvoice_Provider_CPTCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SurgeryInvoice_ProviderID;
		
		private int _CPTCodeID;
		
		private decimal _Amount;
		
		private string _Description;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<CPTCode> _CPTCode;
		
		private EntityRef<SurgeryInvoice_Provider> _SurgeryInvoice_Provider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurgeryInvoice_ProviderIDChanging(int value);
    partial void OnSurgeryInvoice_ProviderIDChanged();
    partial void OnCPTCodeIDChanging(int value);
    partial void OnCPTCodeIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public SurgeryInvoice_Provider_CPTCode()
		{
			this._CPTCode = default(EntityRef<CPTCode>);
			this._SurgeryInvoice_Provider = default(EntityRef<SurgeryInvoice_Provider>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryInvoice_ProviderID", DbType="Int NOT NULL")]
		public int SurgeryInvoice_ProviderID
		{
			get
			{
				return this._SurgeryInvoice_ProviderID;
			}
			set
			{
				if ((this._SurgeryInvoice_ProviderID != value))
				{
					if (this._SurgeryInvoice_Provider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurgeryInvoice_ProviderIDChanging(value);
					this.SendPropertyChanging();
					this._SurgeryInvoice_ProviderID = value;
					this.SendPropertyChanged("SurgeryInvoice_ProviderID");
					this.OnSurgeryInvoice_ProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPTCodeID", DbType="Int NOT NULL")]
		public int CPTCodeID
		{
			get
			{
				return this._CPTCodeID;
			}
			set
			{
				if ((this._CPTCodeID != value))
				{
					if (this._CPTCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCPTCodeIDChanging(value);
					this.SendPropertyChanging();
					this._CPTCodeID = value;
					this.SendPropertyChanged("CPTCodeID");
					this.OnCPTCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CPTCode_SurgeryInvoice_Provider_CPTCode", Storage="_CPTCode", ThisKey="CPTCodeID", OtherKey="ID", IsForeignKey=true)]
		public CPTCode CPTCode
		{
			get
			{
				return this._CPTCode.Entity;
			}
			set
			{
				CPTCode previousValue = this._CPTCode.Entity;
				if (((previousValue != value) 
							|| (this._CPTCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CPTCode.Entity = null;
						previousValue.SurgeryInvoice_Provider_CPTCodes.Remove(this);
					}
					this._CPTCode.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Provider_CPTCodes.Add(this);
						this._CPTCodeID = value.ID;
					}
					else
					{
						this._CPTCodeID = default(int);
					}
					this.SendPropertyChanged("CPTCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Provider_SurgeryInvoice_Provider_CPTCode", Storage="_SurgeryInvoice_Provider", ThisKey="SurgeryInvoice_ProviderID", OtherKey="ID", IsForeignKey=true)]
		public SurgeryInvoice_Provider SurgeryInvoice_Provider
		{
			get
			{
				return this._SurgeryInvoice_Provider.Entity;
			}
			set
			{
				SurgeryInvoice_Provider previousValue = this._SurgeryInvoice_Provider.Entity;
				if (((previousValue != value) 
							|| (this._SurgeryInvoice_Provider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurgeryInvoice_Provider.Entity = null;
						previousValue.SurgeryInvoice_Provider_CPTCodes.Remove(this);
					}
					this._SurgeryInvoice_Provider.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Provider_CPTCodes.Add(this);
						this._SurgeryInvoice_ProviderID = value.ID;
					}
					else
					{
						this._SurgeryInvoice_ProviderID = default(int);
					}
					this.SendPropertyChanged("SurgeryInvoice_Provider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurgeryInvoice_Provider_Payments")]
	public partial class SurgeryInvoice_Provider_Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SurgeryInvoice_ProviderID;
		
		private int _PaymentTypeID;
		
		private System.DateTime _DatePaid;
		
		private decimal _Amount;
		
		private string _CheckNumber;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<PaymentType> _PaymentType;
		
		private EntityRef<SurgeryInvoice_Provider> _SurgeryInvoice_Provider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurgeryInvoice_ProviderIDChanging(int value);
    partial void OnSurgeryInvoice_ProviderIDChanged();
    partial void OnPaymentTypeIDChanging(int value);
    partial void OnPaymentTypeIDChanged();
    partial void OnDatePaidChanging(System.DateTime value);
    partial void OnDatePaidChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnCheckNumberChanging(string value);
    partial void OnCheckNumberChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public SurgeryInvoice_Provider_Payment()
		{
			this._PaymentType = default(EntityRef<PaymentType>);
			this._SurgeryInvoice_Provider = default(EntityRef<SurgeryInvoice_Provider>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryInvoice_ProviderID", DbType="Int NOT NULL")]
		public int SurgeryInvoice_ProviderID
		{
			get
			{
				return this._SurgeryInvoice_ProviderID;
			}
			set
			{
				if ((this._SurgeryInvoice_ProviderID != value))
				{
					if (this._SurgeryInvoice_Provider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurgeryInvoice_ProviderIDChanging(value);
					this.SendPropertyChanging();
					this._SurgeryInvoice_ProviderID = value;
					this.SendPropertyChanged("SurgeryInvoice_ProviderID");
					this.OnSurgeryInvoice_ProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeID", DbType="Int NOT NULL")]
		public int PaymentTypeID
		{
			get
			{
				return this._PaymentTypeID;
			}
			set
			{
				if ((this._PaymentTypeID != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeID = value;
					this.SendPropertyChanged("PaymentTypeID");
					this.OnPaymentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePaid", DbType="DateTime NOT NULL")]
		public System.DateTime DatePaid
		{
			get
			{
				return this._DatePaid;
			}
			set
			{
				if ((this._DatePaid != value))
				{
					this.OnDatePaidChanging(value);
					this.SendPropertyChanging();
					this._DatePaid = value;
					this.SendPropertyChanged("DatePaid");
					this.OnDatePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CheckNumber
		{
			get
			{
				return this._CheckNumber;
			}
			set
			{
				if ((this._CheckNumber != value))
				{
					this.OnCheckNumberChanging(value);
					this.SendPropertyChanging();
					this._CheckNumber = value;
					this.SendPropertyChanged("CheckNumber");
					this.OnCheckNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_SurgeryInvoice_Provider_Payment", Storage="_PaymentType", ThisKey="PaymentTypeID", OtherKey="ID", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.SurgeryInvoice_Provider_Payments.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Provider_Payments.Add(this);
						this._PaymentTypeID = value.ID;
					}
					else
					{
						this._PaymentTypeID = default(int);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Provider_SurgeryInvoice_Provider_Payment", Storage="_SurgeryInvoice_Provider", ThisKey="SurgeryInvoice_ProviderID", OtherKey="ID", IsForeignKey=true)]
		public SurgeryInvoice_Provider SurgeryInvoice_Provider
		{
			get
			{
				return this._SurgeryInvoice_Provider.Entity;
			}
			set
			{
				SurgeryInvoice_Provider previousValue = this._SurgeryInvoice_Provider.Entity;
				if (((previousValue != value) 
							|| (this._SurgeryInvoice_Provider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurgeryInvoice_Provider.Entity = null;
						previousValue.SurgeryInvoice_Provider_Payments.Remove(this);
					}
					this._SurgeryInvoice_Provider.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Provider_Payments.Add(this);
						this._SurgeryInvoice_ProviderID = value.ID;
					}
					else
					{
						this._SurgeryInvoice_ProviderID = default(int);
					}
					this.SendPropertyChanged("SurgeryInvoice_Provider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurgeryInvoice_Provider_Services")]
	public partial class SurgeryInvoice_Provider_Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SurgeryInvoice_ProviderID;
		
		private System.Nullable<decimal> _EstimatedCost;
		
		private decimal _Cost;
		
		private decimal _Discount;
		
		private decimal _PPODiscount;
		
		private System.DateTime _DueDate;
		
		private decimal _AmountDue;
		
		private bool _CalculateAmountDue;
		
		private string _AccountNumber;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<SurgeryInvoice_Provider> _SurgeryInvoice_Provider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurgeryInvoice_ProviderIDChanging(int value);
    partial void OnSurgeryInvoice_ProviderIDChanged();
    partial void OnEstimatedCostChanging(System.Nullable<decimal> value);
    partial void OnEstimatedCostChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnDiscountChanging(decimal value);
    partial void OnDiscountChanged();
    partial void OnPPODiscountChanging(decimal value);
    partial void OnPPODiscountChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnAmountDueChanging(decimal value);
    partial void OnAmountDueChanged();
    partial void OnCalculateAmountDueChanging(bool value);
    partial void OnCalculateAmountDueChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public SurgeryInvoice_Provider_Service()
		{
			this._SurgeryInvoice_Provider = default(EntityRef<SurgeryInvoice_Provider>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryInvoice_ProviderID", DbType="Int NOT NULL")]
		public int SurgeryInvoice_ProviderID
		{
			get
			{
				return this._SurgeryInvoice_ProviderID;
			}
			set
			{
				if ((this._SurgeryInvoice_ProviderID != value))
				{
					if (this._SurgeryInvoice_Provider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurgeryInvoice_ProviderIDChanging(value);
					this.SendPropertyChanging();
					this._SurgeryInvoice_ProviderID = value;
					this.SendPropertyChanged("SurgeryInvoice_ProviderID");
					this.OnSurgeryInvoice_ProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedCost", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> EstimatedCost
		{
			get
			{
				return this._EstimatedCost;
			}
			set
			{
				if ((this._EstimatedCost != value))
				{
					this.OnEstimatedCostChanging(value);
					this.SendPropertyChanging();
					this._EstimatedCost = value;
					this.SendPropertyChanged("EstimatedCost");
					this.OnEstimatedCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,2) NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PPODiscount", DbType="Decimal(18,2) NOT NULL")]
		public decimal PPODiscount
		{
			get
			{
				return this._PPODiscount;
			}
			set
			{
				if ((this._PPODiscount != value))
				{
					this.OnPPODiscountChanging(value);
					this.SendPropertyChanging();
					this._PPODiscount = value;
					this.SendPropertyChanged("PPODiscount");
					this.OnPPODiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountDue", DbType="Decimal(18,2) NOT NULL")]
		public decimal AmountDue
		{
			get
			{
				return this._AmountDue;
			}
			set
			{
				if ((this._AmountDue != value))
				{
					this.OnAmountDueChanging(value);
					this.SendPropertyChanging();
					this._AmountDue = value;
					this.SendPropertyChanged("AmountDue");
					this.OnAmountDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculateAmountDue", DbType="Bit NOT NULL")]
		public bool CalculateAmountDue
		{
			get
			{
				return this._CalculateAmountDue;
			}
			set
			{
				if ((this._CalculateAmountDue != value))
				{
					this.OnCalculateAmountDueChanging(value);
					this.SendPropertyChanging();
					this._CalculateAmountDue = value;
					this.SendPropertyChanged("CalculateAmountDue");
					this.OnCalculateAmountDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Provider_SurgeryInvoice_Provider_Service", Storage="_SurgeryInvoice_Provider", ThisKey="SurgeryInvoice_ProviderID", OtherKey="ID", IsForeignKey=true)]
		public SurgeryInvoice_Provider SurgeryInvoice_Provider
		{
			get
			{
				return this._SurgeryInvoice_Provider.Entity;
			}
			set
			{
				SurgeryInvoice_Provider previousValue = this._SurgeryInvoice_Provider.Entity;
				if (((previousValue != value) 
							|| (this._SurgeryInvoice_Provider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurgeryInvoice_Provider.Entity = null;
						previousValue.SurgeryInvoice_Provider_Services.Remove(this);
					}
					this._SurgeryInvoice_Provider.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Provider_Services.Add(this);
						this._SurgeryInvoice_ProviderID = value.ID;
					}
					else
					{
						this._SurgeryInvoice_ProviderID = default(int);
					}
					this.SendPropertyChanged("SurgeryInvoice_Provider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurgeryInvoice_Providers")]
	public partial class SurgeryInvoice_Provider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SurgeryInvoiceID;
		
		private int _InvoiceProviderID;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<SurgeryInvoice_Provider_CPTCode> _SurgeryInvoice_Provider_CPTCodes;
		
		private EntitySet<SurgeryInvoice_Provider_Payment> _SurgeryInvoice_Provider_Payments;
		
		private EntitySet<SurgeryInvoice_Provider_Service> _SurgeryInvoice_Provider_Services;
		
		private EntityRef<InvoiceProvider> _InvoiceProvider;
		
		private EntityRef<SurgeryInvoice> _SurgeryInvoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurgeryInvoiceIDChanging(int value);
    partial void OnSurgeryInvoiceIDChanged();
    partial void OnInvoiceProviderIDChanging(int value);
    partial void OnInvoiceProviderIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public SurgeryInvoice_Provider()
		{
			this._SurgeryInvoice_Provider_CPTCodes = new EntitySet<SurgeryInvoice_Provider_CPTCode>(new Action<SurgeryInvoice_Provider_CPTCode>(this.attach_SurgeryInvoice_Provider_CPTCodes), new Action<SurgeryInvoice_Provider_CPTCode>(this.detach_SurgeryInvoice_Provider_CPTCodes));
			this._SurgeryInvoice_Provider_Payments = new EntitySet<SurgeryInvoice_Provider_Payment>(new Action<SurgeryInvoice_Provider_Payment>(this.attach_SurgeryInvoice_Provider_Payments), new Action<SurgeryInvoice_Provider_Payment>(this.detach_SurgeryInvoice_Provider_Payments));
			this._SurgeryInvoice_Provider_Services = new EntitySet<SurgeryInvoice_Provider_Service>(new Action<SurgeryInvoice_Provider_Service>(this.attach_SurgeryInvoice_Provider_Services), new Action<SurgeryInvoice_Provider_Service>(this.detach_SurgeryInvoice_Provider_Services));
			this._InvoiceProvider = default(EntityRef<InvoiceProvider>);
			this._SurgeryInvoice = default(EntityRef<SurgeryInvoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryInvoiceID", DbType="Int NOT NULL")]
		public int SurgeryInvoiceID
		{
			get
			{
				return this._SurgeryInvoiceID;
			}
			set
			{
				if ((this._SurgeryInvoiceID != value))
				{
					if (this._SurgeryInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurgeryInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._SurgeryInvoiceID = value;
					this.SendPropertyChanged("SurgeryInvoiceID");
					this.OnSurgeryInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceProviderID", DbType="Int NOT NULL")]
		public int InvoiceProviderID
		{
			get
			{
				return this._InvoiceProviderID;
			}
			set
			{
				if ((this._InvoiceProviderID != value))
				{
					if (this._InvoiceProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceProviderID = value;
					this.SendPropertyChanged("InvoiceProviderID");
					this.OnInvoiceProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Provider_SurgeryInvoice_Provider_CPTCode", Storage="_SurgeryInvoice_Provider_CPTCodes", ThisKey="ID", OtherKey="SurgeryInvoice_ProviderID")]
		public EntitySet<SurgeryInvoice_Provider_CPTCode> SurgeryInvoice_Provider_CPTCodes
		{
			get
			{
				return this._SurgeryInvoice_Provider_CPTCodes;
			}
			set
			{
				this._SurgeryInvoice_Provider_CPTCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Provider_SurgeryInvoice_Provider_Payment", Storage="_SurgeryInvoice_Provider_Payments", ThisKey="ID", OtherKey="SurgeryInvoice_ProviderID")]
		public EntitySet<SurgeryInvoice_Provider_Payment> SurgeryInvoice_Provider_Payments
		{
			get
			{
				return this._SurgeryInvoice_Provider_Payments;
			}
			set
			{
				this._SurgeryInvoice_Provider_Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Provider_SurgeryInvoice_Provider_Service", Storage="_SurgeryInvoice_Provider_Services", ThisKey="ID", OtherKey="SurgeryInvoice_ProviderID")]
		public EntitySet<SurgeryInvoice_Provider_Service> SurgeryInvoice_Provider_Services
		{
			get
			{
				return this._SurgeryInvoice_Provider_Services;
			}
			set
			{
				this._SurgeryInvoice_Provider_Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceProvider_SurgeryInvoice_Provider", Storage="_InvoiceProvider", ThisKey="InvoiceProviderID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceProvider InvoiceProvider
		{
			get
			{
				return this._InvoiceProvider.Entity;
			}
			set
			{
				InvoiceProvider previousValue = this._InvoiceProvider.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceProvider.Entity = null;
						previousValue.SurgeryInvoice_Providers.Remove(this);
					}
					this._InvoiceProvider.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Providers.Add(this);
						this._InvoiceProviderID = value.ID;
					}
					else
					{
						this._InvoiceProviderID = default(int);
					}
					this.SendPropertyChanged("InvoiceProvider");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_SurgeryInvoice_Provider", Storage="_SurgeryInvoice", ThisKey="SurgeryInvoiceID", OtherKey="ID", IsForeignKey=true)]
		public SurgeryInvoice SurgeryInvoice
		{
			get
			{
				return this._SurgeryInvoice.Entity;
			}
			set
			{
				SurgeryInvoice previousValue = this._SurgeryInvoice.Entity;
				if (((previousValue != value) 
							|| (this._SurgeryInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurgeryInvoice.Entity = null;
						previousValue.SurgeryInvoice_Providers.Remove(this);
					}
					this._SurgeryInvoice.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Providers.Add(this);
						this._SurgeryInvoiceID = value.ID;
					}
					else
					{
						this._SurgeryInvoiceID = default(int);
					}
					this.SendPropertyChanged("SurgeryInvoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurgeryInvoice_Provider_CPTCodes(SurgeryInvoice_Provider_CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Provider = this;
		}
		
		private void detach_SurgeryInvoice_Provider_CPTCodes(SurgeryInvoice_Provider_CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Provider = null;
		}
		
		private void attach_SurgeryInvoice_Provider_Payments(SurgeryInvoice_Provider_Payment entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Provider = this;
		}
		
		private void detach_SurgeryInvoice_Provider_Payments(SurgeryInvoice_Provider_Payment entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Provider = null;
		}
		
		private void attach_SurgeryInvoice_Provider_Services(SurgeryInvoice_Provider_Service entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Provider = this;
		}
		
		private void detach_SurgeryInvoice_Provider_Services(SurgeryInvoice_Provider_Service entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Provider = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurgeryInvoice_Surgery")]
	public partial class SurgeryInvoice_Surgery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SurgeryInvoiceID;
		
		private int _SurgeryID;
		
		private bool _isInpatient;
		
		private string _Notes;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private bool _isCanceled;
		
		private EntitySet<SurgeryInvoice_SurgeryDate> _SurgeryInvoice_SurgeryDates;
		
		private EntitySet<SurgeryInvoice_Surgery_ICDCode> _SurgeryInvoice_Surgery_ICDCodes;
		
		private EntityRef<Surgery> _Surgery;
		
		private EntityRef<SurgeryInvoice> _SurgeryInvoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurgeryInvoiceIDChanging(int value);
    partial void OnSurgeryInvoiceIDChanged();
    partial void OnSurgeryIDChanging(int value);
    partial void OnSurgeryIDChanged();
    partial void OnisInpatientChanging(bool value);
    partial void OnisInpatientChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnisCanceledChanging(bool value);
    partial void OnisCanceledChanged();
    #endregion
		
		public SurgeryInvoice_Surgery()
		{
			this._SurgeryInvoice_SurgeryDates = new EntitySet<SurgeryInvoice_SurgeryDate>(new Action<SurgeryInvoice_SurgeryDate>(this.attach_SurgeryInvoice_SurgeryDates), new Action<SurgeryInvoice_SurgeryDate>(this.detach_SurgeryInvoice_SurgeryDates));
			this._SurgeryInvoice_Surgery_ICDCodes = new EntitySet<SurgeryInvoice_Surgery_ICDCode>(new Action<SurgeryInvoice_Surgery_ICDCode>(this.attach_SurgeryInvoice_Surgery_ICDCodes), new Action<SurgeryInvoice_Surgery_ICDCode>(this.detach_SurgeryInvoice_Surgery_ICDCodes));
			this._Surgery = default(EntityRef<Surgery>);
			this._SurgeryInvoice = default(EntityRef<SurgeryInvoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryInvoiceID", DbType="Int NOT NULL")]
		public int SurgeryInvoiceID
		{
			get
			{
				return this._SurgeryInvoiceID;
			}
			set
			{
				if ((this._SurgeryInvoiceID != value))
				{
					if (this._SurgeryInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurgeryInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._SurgeryInvoiceID = value;
					this.SendPropertyChanged("SurgeryInvoiceID");
					this.OnSurgeryInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryID", DbType="Int NOT NULL")]
		public int SurgeryID
		{
			get
			{
				return this._SurgeryID;
			}
			set
			{
				if ((this._SurgeryID != value))
				{
					if (this._Surgery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurgeryIDChanging(value);
					this.SendPropertyChanging();
					this._SurgeryID = value;
					this.SendPropertyChanged("SurgeryID");
					this.OnSurgeryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isInpatient", DbType="Bit NOT NULL")]
		public bool isInpatient
		{
			get
			{
				return this._isInpatient;
			}
			set
			{
				if ((this._isInpatient != value))
				{
					this.OnisInpatientChanging(value);
					this.SendPropertyChanging();
					this._isInpatient = value;
					this.SendPropertyChanged("isInpatient");
					this.OnisInpatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCanceled", DbType="Bit NOT NULL")]
		public bool isCanceled
		{
			get
			{
				return this._isCanceled;
			}
			set
			{
				if ((this._isCanceled != value))
				{
					this.OnisCanceledChanging(value);
					this.SendPropertyChanging();
					this._isCanceled = value;
					this.SendPropertyChanged("isCanceled");
					this.OnisCanceledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Surgery_SurgeryInvoice_SurgeryDate", Storage="_SurgeryInvoice_SurgeryDates", ThisKey="ID", OtherKey="SurgeryInvoice_SurgeryID")]
		public EntitySet<SurgeryInvoice_SurgeryDate> SurgeryInvoice_SurgeryDates
		{
			get
			{
				return this._SurgeryInvoice_SurgeryDates;
			}
			set
			{
				this._SurgeryInvoice_SurgeryDates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Surgery_SurgeryInvoice_Surgery_ICDCode", Storage="_SurgeryInvoice_Surgery_ICDCodes", ThisKey="ID", OtherKey="SurgeryInvoice_SurgeryID")]
		public EntitySet<SurgeryInvoice_Surgery_ICDCode> SurgeryInvoice_Surgery_ICDCodes
		{
			get
			{
				return this._SurgeryInvoice_Surgery_ICDCodes;
			}
			set
			{
				this._SurgeryInvoice_Surgery_ICDCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Surgery_SurgeryInvoice_Surgery", Storage="_Surgery", ThisKey="SurgeryID", OtherKey="ID", IsForeignKey=true)]
		public Surgery Surgery
		{
			get
			{
				return this._Surgery.Entity;
			}
			set
			{
				Surgery previousValue = this._Surgery.Entity;
				if (((previousValue != value) 
							|| (this._Surgery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Surgery.Entity = null;
						previousValue.SurgeryInvoice_Surgeries.Remove(this);
					}
					this._Surgery.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Surgeries.Add(this);
						this._SurgeryID = value.ID;
					}
					else
					{
						this._SurgeryID = default(int);
					}
					this.SendPropertyChanged("Surgery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_SurgeryInvoice_Surgery", Storage="_SurgeryInvoice", ThisKey="SurgeryInvoiceID", OtherKey="ID", IsForeignKey=true)]
		public SurgeryInvoice SurgeryInvoice
		{
			get
			{
				return this._SurgeryInvoice.Entity;
			}
			set
			{
				SurgeryInvoice previousValue = this._SurgeryInvoice.Entity;
				if (((previousValue != value) 
							|| (this._SurgeryInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurgeryInvoice.Entity = null;
						previousValue.SurgeryInvoice_Surgeries.Remove(this);
					}
					this._SurgeryInvoice.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Surgeries.Add(this);
						this._SurgeryInvoiceID = value.ID;
					}
					else
					{
						this._SurgeryInvoiceID = default(int);
					}
					this.SendPropertyChanged("SurgeryInvoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurgeryInvoice_SurgeryDates(SurgeryInvoice_SurgeryDate entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Surgery = this;
		}
		
		private void detach_SurgeryInvoice_SurgeryDates(SurgeryInvoice_SurgeryDate entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Surgery = null;
		}
		
		private void attach_SurgeryInvoice_Surgery_ICDCodes(SurgeryInvoice_Surgery_ICDCode entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Surgery = this;
		}
		
		private void detach_SurgeryInvoice_Surgery_ICDCodes(SurgeryInvoice_Surgery_ICDCode entity)
		{
			this.SendPropertyChanging();
			entity.SurgeryInvoice_Surgery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurgeryInvoice_SurgeryDates")]
	public partial class SurgeryInvoice_SurgeryDate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SurgeryInvoice_SurgeryID;
		
		private System.DateTime _ScheduledDate;
		
		private bool _isPrimaryDate;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<SurgeryInvoice_Surgery> _SurgeryInvoice_Surgery;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurgeryInvoice_SurgeryIDChanging(int value);
    partial void OnSurgeryInvoice_SurgeryIDChanged();
    partial void OnScheduledDateChanging(System.DateTime value);
    partial void OnScheduledDateChanged();
    partial void OnisPrimaryDateChanging(bool value);
    partial void OnisPrimaryDateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public SurgeryInvoice_SurgeryDate()
		{
			this._SurgeryInvoice_Surgery = default(EntityRef<SurgeryInvoice_Surgery>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryInvoice_SurgeryID", DbType="Int NOT NULL")]
		public int SurgeryInvoice_SurgeryID
		{
			get
			{
				return this._SurgeryInvoice_SurgeryID;
			}
			set
			{
				if ((this._SurgeryInvoice_SurgeryID != value))
				{
					if (this._SurgeryInvoice_Surgery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurgeryInvoice_SurgeryIDChanging(value);
					this.SendPropertyChanging();
					this._SurgeryInvoice_SurgeryID = value;
					this.SendPropertyChanged("SurgeryInvoice_SurgeryID");
					this.OnSurgeryInvoice_SurgeryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduledDate", DbType="DateTime NOT NULL")]
		public System.DateTime ScheduledDate
		{
			get
			{
				return this._ScheduledDate;
			}
			set
			{
				if ((this._ScheduledDate != value))
				{
					this.OnScheduledDateChanging(value);
					this.SendPropertyChanging();
					this._ScheduledDate = value;
					this.SendPropertyChanged("ScheduledDate");
					this.OnScheduledDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPrimaryDate", DbType="Bit NOT NULL")]
		public bool isPrimaryDate
		{
			get
			{
				return this._isPrimaryDate;
			}
			set
			{
				if ((this._isPrimaryDate != value))
				{
					this.OnisPrimaryDateChanging(value);
					this.SendPropertyChanging();
					this._isPrimaryDate = value;
					this.SendPropertyChanged("isPrimaryDate");
					this.OnisPrimaryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Surgery_SurgeryInvoice_SurgeryDate", Storage="_SurgeryInvoice_Surgery", ThisKey="SurgeryInvoice_SurgeryID", OtherKey="ID", IsForeignKey=true)]
		public SurgeryInvoice_Surgery SurgeryInvoice_Surgery
		{
			get
			{
				return this._SurgeryInvoice_Surgery.Entity;
			}
			set
			{
				SurgeryInvoice_Surgery previousValue = this._SurgeryInvoice_Surgery.Entity;
				if (((previousValue != value) 
							|| (this._SurgeryInvoice_Surgery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurgeryInvoice_Surgery.Entity = null;
						previousValue.SurgeryInvoice_SurgeryDates.Remove(this);
					}
					this._SurgeryInvoice_Surgery.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_SurgeryDates.Add(this);
						this._SurgeryInvoice_SurgeryID = value.ID;
					}
					else
					{
						this._SurgeryInvoice_SurgeryID = default(int);
					}
					this.SendPropertyChanged("SurgeryInvoice_Surgery");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<TestInvoice_Test> _TestInvoice_Tests;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Test()
		{
			this._TestInvoice_Tests = new EntitySet<TestInvoice_Test>(new Action<TestInvoice_Test>(this.attach_TestInvoice_Tests), new Action<TestInvoice_Test>(this.detach_TestInvoice_Tests));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestInvoice_Test", Storage="_TestInvoice_Tests", ThisKey="ID", OtherKey="TestID")]
		public EntitySet<TestInvoice_Test> TestInvoice_Tests
		{
			get
			{
				return this._TestInvoice_Tests;
			}
			set
			{
				this._TestInvoice_Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Test", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestInvoice_Tests(TestInvoice_Test entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_TestInvoice_Tests(TestInvoice_Test entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestInvoice")]
	public partial class TestInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TestTypeID;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<TestInvoice_Test> _TestInvoice_Tests;
		
		private EntityRef<TestType> _TestType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTestTypeIDChanging(int value);
    partial void OnTestTypeIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public TestInvoice()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._TestInvoice_Tests = new EntitySet<TestInvoice_Test>(new Action<TestInvoice_Test>(this.attach_TestInvoice_Tests), new Action<TestInvoice_Test>(this.detach_TestInvoice_Tests));
			this._TestType = default(EntityRef<TestType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestTypeID", DbType="Int NOT NULL")]
		public int TestTypeID
		{
			get
			{
				return this._TestTypeID;
			}
			set
			{
				if ((this._TestTypeID != value))
				{
					if (this._TestType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TestTypeID = value;
					this.SendPropertyChanged("TestTypeID");
					this.OnTestTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestInvoice_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="TestInvoiceID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestInvoice_TestInvoice_Test", Storage="_TestInvoice_Tests", ThisKey="ID", OtherKey="TestInvoiceID")]
		public EntitySet<TestInvoice_Test> TestInvoice_Tests
		{
			get
			{
				return this._TestInvoice_Tests;
			}
			set
			{
				this._TestInvoice_Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestType_TestInvoice", Storage="_TestType", ThisKey="TestTypeID", OtherKey="ID", IsForeignKey=true)]
		public TestType TestType
		{
			get
			{
				return this._TestType.Entity;
			}
			set
			{
				TestType previousValue = this._TestType.Entity;
				if (((previousValue != value) 
							|| (this._TestType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestType.Entity = null;
						previousValue.TestInvoices.Remove(this);
					}
					this._TestType.Entity = value;
					if ((value != null))
					{
						value.TestInvoices.Add(this);
						this._TestTypeID = value.ID;
					}
					else
					{
						this._TestTypeID = default(int);
					}
					this.SendPropertyChanged("TestType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.TestInvoice = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.TestInvoice = null;
		}
		
		private void attach_TestInvoice_Tests(TestInvoice_Test entity)
		{
			this.SendPropertyChanging();
			entity.TestInvoice = this;
		}
		
		private void detach_TestInvoice_Tests(TestInvoice_Test entity)
		{
			this.SendPropertyChanging();
			entity.TestInvoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestInvoice_Test")]
	public partial class TestInvoice_Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TestInvoiceID;
		
		private int _TestID;
		
		private int _InvoiceProviderID;
		
		private string _Notes;
		
		private System.DateTime _TestDate;
		
		private System.Nullable<System.TimeSpan> _TestTime;
		
		private System.Nullable<int> _NumberOfTests;
		
		private int _MRI;
		
		private System.Nullable<bool> _IsPositive;
		
		private bool _isCanceled;
		
		private decimal _TestCost;
		
		private decimal _PPODiscount;
		
		private decimal _AmountToProvider;
		
		private bool _CalculateAmountToProvider;
		
		private System.DateTime _ProviderDueDate;
		
		private System.Nullable<decimal> _DepositToProvider;
		
		private System.Nullable<decimal> _AmountPaidToProvider;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _CheckNumber;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private string _AccountNumber;
		
		private EntitySet<TestInvoice_Test_CPTCode> _TestInvoice_Test_CPTCodes;
		
		private EntityRef<InvoiceProvider> _InvoiceProvider;
		
		private EntityRef<Test> _Test;
		
		private EntityRef<TestInvoice> _TestInvoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTestInvoiceIDChanging(int value);
    partial void OnTestInvoiceIDChanged();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnInvoiceProviderIDChanging(int value);
    partial void OnInvoiceProviderIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnTestDateChanging(System.DateTime value);
    partial void OnTestDateChanged();
    partial void OnTestTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTestTimeChanged();
    partial void OnNumberOfTestsChanging(System.Nullable<int> value);
    partial void OnNumberOfTestsChanged();
    partial void OnMRIChanging(int value);
    partial void OnMRIChanged();
    partial void OnIsPositiveChanging(System.Nullable<bool> value);
    partial void OnIsPositiveChanged();
    partial void OnisCanceledChanging(bool value);
    partial void OnisCanceledChanged();
    partial void OnTestCostChanging(decimal value);
    partial void OnTestCostChanged();
    partial void OnPPODiscountChanging(decimal value);
    partial void OnPPODiscountChanged();
    partial void OnAmountToProviderChanging(decimal value);
    partial void OnAmountToProviderChanged();
    partial void OnCalculateAmountToProviderChanging(bool value);
    partial void OnCalculateAmountToProviderChanged();
    partial void OnProviderDueDateChanging(System.DateTime value);
    partial void OnProviderDueDateChanged();
    partial void OnDepositToProviderChanging(System.Nullable<decimal> value);
    partial void OnDepositToProviderChanged();
    partial void OnAmountPaidToProviderChanging(System.Nullable<decimal> value);
    partial void OnAmountPaidToProviderChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnCheckNumberChanging(string value);
    partial void OnCheckNumberChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    #endregion
		
		public TestInvoice_Test()
		{
			this._TestInvoice_Test_CPTCodes = new EntitySet<TestInvoice_Test_CPTCode>(new Action<TestInvoice_Test_CPTCode>(this.attach_TestInvoice_Test_CPTCodes), new Action<TestInvoice_Test_CPTCode>(this.detach_TestInvoice_Test_CPTCodes));
			this._InvoiceProvider = default(EntityRef<InvoiceProvider>);
			this._Test = default(EntityRef<Test>);
			this._TestInvoice = default(EntityRef<TestInvoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestInvoiceID", DbType="Int NOT NULL")]
		public int TestInvoiceID
		{
			get
			{
				return this._TestInvoiceID;
			}
			set
			{
				if ((this._TestInvoiceID != value))
				{
					if (this._TestInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._TestInvoiceID = value;
					this.SendPropertyChanged("TestInvoiceID");
					this.OnTestInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", DbType="Int NOT NULL")]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceProviderID", DbType="Int NOT NULL")]
		public int InvoiceProviderID
		{
			get
			{
				return this._InvoiceProviderID;
			}
			set
			{
				if ((this._InvoiceProviderID != value))
				{
					if (this._InvoiceProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceProviderIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceProviderID = value;
					this.SendPropertyChanged("InvoiceProviderID");
					this.OnInvoiceProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDate", DbType="DateTime NOT NULL")]
		public System.DateTime TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this.OnTestDateChanging(value);
					this.SendPropertyChanging();
					this._TestDate = value;
					this.SendPropertyChanged("TestDate");
					this.OnTestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> TestTime
		{
			get
			{
				return this._TestTime;
			}
			set
			{
				if ((this._TestTime != value))
				{
					this.OnTestTimeChanging(value);
					this.SendPropertyChanging();
					this._TestTime = value;
					this.SendPropertyChanged("TestTime");
					this.OnTestTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfTests", DbType="Int")]
		public System.Nullable<int> NumberOfTests
		{
			get
			{
				return this._NumberOfTests;
			}
			set
			{
				if ((this._NumberOfTests != value))
				{
					this.OnNumberOfTestsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfTests = value;
					this.SendPropertyChanged("NumberOfTests");
					this.OnNumberOfTestsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRI", DbType="Int NOT NULL")]
		public int MRI
		{
			get
			{
				return this._MRI;
			}
			set
			{
				if ((this._MRI != value))
				{
					this.OnMRIChanging(value);
					this.SendPropertyChanging();
					this._MRI = value;
					this.SendPropertyChanged("MRI");
					this.OnMRIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPositive", DbType="Bit")]
		public System.Nullable<bool> IsPositive
		{
			get
			{
				return this._IsPositive;
			}
			set
			{
				if ((this._IsPositive != value))
				{
					this.OnIsPositiveChanging(value);
					this.SendPropertyChanging();
					this._IsPositive = value;
					this.SendPropertyChanged("IsPositive");
					this.OnIsPositiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCanceled", DbType="Bit NOT NULL")]
		public bool isCanceled
		{
			get
			{
				return this._isCanceled;
			}
			set
			{
				if ((this._isCanceled != value))
				{
					this.OnisCanceledChanging(value);
					this.SendPropertyChanging();
					this._isCanceled = value;
					this.SendPropertyChanged("isCanceled");
					this.OnisCanceledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestCost", DbType="Decimal(18,2) NOT NULL")]
		public decimal TestCost
		{
			get
			{
				return this._TestCost;
			}
			set
			{
				if ((this._TestCost != value))
				{
					this.OnTestCostChanging(value);
					this.SendPropertyChanging();
					this._TestCost = value;
					this.SendPropertyChanged("TestCost");
					this.OnTestCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PPODiscount", DbType="Decimal(18,2) NOT NULL")]
		public decimal PPODiscount
		{
			get
			{
				return this._PPODiscount;
			}
			set
			{
				if ((this._PPODiscount != value))
				{
					this.OnPPODiscountChanging(value);
					this.SendPropertyChanging();
					this._PPODiscount = value;
					this.SendPropertyChanged("PPODiscount");
					this.OnPPODiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountToProvider", DbType="Decimal(18,2) NOT NULL")]
		public decimal AmountToProvider
		{
			get
			{
				return this._AmountToProvider;
			}
			set
			{
				if ((this._AmountToProvider != value))
				{
					this.OnAmountToProviderChanging(value);
					this.SendPropertyChanging();
					this._AmountToProvider = value;
					this.SendPropertyChanged("AmountToProvider");
					this.OnAmountToProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculateAmountToProvider", DbType="Bit NOT NULL")]
		public bool CalculateAmountToProvider
		{
			get
			{
				return this._CalculateAmountToProvider;
			}
			set
			{
				if ((this._CalculateAmountToProvider != value))
				{
					this.OnCalculateAmountToProviderChanging(value);
					this.SendPropertyChanging();
					this._CalculateAmountToProvider = value;
					this.SendPropertyChanged("CalculateAmountToProvider");
					this.OnCalculateAmountToProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderDueDate", DbType="DateTime NOT NULL")]
		public System.DateTime ProviderDueDate
		{
			get
			{
				return this._ProviderDueDate;
			}
			set
			{
				if ((this._ProviderDueDate != value))
				{
					this.OnProviderDueDateChanging(value);
					this.SendPropertyChanging();
					this._ProviderDueDate = value;
					this.SendPropertyChanged("ProviderDueDate");
					this.OnProviderDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositToProvider", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> DepositToProvider
		{
			get
			{
				return this._DepositToProvider;
			}
			set
			{
				if ((this._DepositToProvider != value))
				{
					this.OnDepositToProviderChanging(value);
					this.SendPropertyChanging();
					this._DepositToProvider = value;
					this.SendPropertyChanged("DepositToProvider");
					this.OnDepositToProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPaidToProvider", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AmountPaidToProvider
		{
			get
			{
				return this._AmountPaidToProvider;
			}
			set
			{
				if ((this._AmountPaidToProvider != value))
				{
					this.OnAmountPaidToProviderChanging(value);
					this.SendPropertyChanging();
					this._AmountPaidToProvider = value;
					this.SendPropertyChanged("AmountPaidToProvider");
					this.OnAmountPaidToProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckNumber", DbType="VarChar(50)")]
		public string CheckNumber
		{
			get
			{
				return this._CheckNumber;
			}
			set
			{
				if ((this._CheckNumber != value))
				{
					this.OnCheckNumberChanging(value);
					this.SendPropertyChanging();
					this._CheckNumber = value;
					this.SendPropertyChanged("CheckNumber");
					this.OnCheckNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="VarChar(100)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestInvoice_Test_TestInvoice_Test_CPTCode", Storage="_TestInvoice_Test_CPTCodes", ThisKey="ID", OtherKey="TestInvoice_TestID")]
		public EntitySet<TestInvoice_Test_CPTCode> TestInvoice_Test_CPTCodes
		{
			get
			{
				return this._TestInvoice_Test_CPTCodes;
			}
			set
			{
				this._TestInvoice_Test_CPTCodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceProvider_TestInvoice_Test", Storage="_InvoiceProvider", ThisKey="InvoiceProviderID", OtherKey="ID", IsForeignKey=true)]
		public InvoiceProvider InvoiceProvider
		{
			get
			{
				return this._InvoiceProvider.Entity;
			}
			set
			{
				InvoiceProvider previousValue = this._InvoiceProvider.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceProvider.Entity = null;
						previousValue.TestInvoice_Tests.Remove(this);
					}
					this._InvoiceProvider.Entity = value;
					if ((value != null))
					{
						value.TestInvoice_Tests.Add(this);
						this._InvoiceProviderID = value.ID;
					}
					else
					{
						this._InvoiceProviderID = default(int);
					}
					this.SendPropertyChanged("InvoiceProvider");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestInvoice_Test", Storage="_Test", ThisKey="TestID", OtherKey="ID", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.TestInvoice_Tests.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.TestInvoice_Tests.Add(this);
						this._TestID = value.ID;
					}
					else
					{
						this._TestID = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestInvoice_TestInvoice_Test", Storage="_TestInvoice", ThisKey="TestInvoiceID", OtherKey="ID", IsForeignKey=true)]
		public TestInvoice TestInvoice
		{
			get
			{
				return this._TestInvoice.Entity;
			}
			set
			{
				TestInvoice previousValue = this._TestInvoice.Entity;
				if (((previousValue != value) 
							|| (this._TestInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestInvoice.Entity = null;
						previousValue.TestInvoice_Tests.Remove(this);
					}
					this._TestInvoice.Entity = value;
					if ((value != null))
					{
						value.TestInvoice_Tests.Add(this);
						this._TestInvoiceID = value.ID;
					}
					else
					{
						this._TestInvoiceID = default(int);
					}
					this.SendPropertyChanged("TestInvoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestInvoice_Test_CPTCodes(TestInvoice_Test_CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.TestInvoice_Test = this;
		}
		
		private void detach_TestInvoice_Test_CPTCodes(TestInvoice_Test_CPTCode entity)
		{
			this.SendPropertyChanging();
			entity.TestInvoice_Test = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestInvoice_Test_CPTCodes")]
	public partial class TestInvoice_Test_CPTCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TestInvoice_TestID;
		
		private int _CPTCodeID;
		
		private decimal _Amount;
		
		private string _Description;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<CPTCode> _CPTCode;
		
		private EntityRef<TestInvoice_Test> _TestInvoice_Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTestInvoice_TestIDChanging(int value);
    partial void OnTestInvoice_TestIDChanged();
    partial void OnCPTCodeIDChanging(int value);
    partial void OnCPTCodeIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public TestInvoice_Test_CPTCode()
		{
			this._CPTCode = default(EntityRef<CPTCode>);
			this._TestInvoice_Test = default(EntityRef<TestInvoice_Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestInvoice_TestID", DbType="Int NOT NULL")]
		public int TestInvoice_TestID
		{
			get
			{
				return this._TestInvoice_TestID;
			}
			set
			{
				if ((this._TestInvoice_TestID != value))
				{
					if (this._TestInvoice_Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestInvoice_TestIDChanging(value);
					this.SendPropertyChanging();
					this._TestInvoice_TestID = value;
					this.SendPropertyChanged("TestInvoice_TestID");
					this.OnTestInvoice_TestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPTCodeID", DbType="Int NOT NULL")]
		public int CPTCodeID
		{
			get
			{
				return this._CPTCodeID;
			}
			set
			{
				if ((this._CPTCodeID != value))
				{
					if (this._CPTCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCPTCodeIDChanging(value);
					this.SendPropertyChanging();
					this._CPTCodeID = value;
					this.SendPropertyChanged("CPTCodeID");
					this.OnCPTCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CPTCode_TestInvoice_Test_CPTCode", Storage="_CPTCode", ThisKey="CPTCodeID", OtherKey="ID", IsForeignKey=true)]
		public CPTCode CPTCode
		{
			get
			{
				return this._CPTCode.Entity;
			}
			set
			{
				CPTCode previousValue = this._CPTCode.Entity;
				if (((previousValue != value) 
							|| (this._CPTCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CPTCode.Entity = null;
						previousValue.TestInvoice_Test_CPTCodes.Remove(this);
					}
					this._CPTCode.Entity = value;
					if ((value != null))
					{
						value.TestInvoice_Test_CPTCodes.Add(this);
						this._CPTCodeID = value.ID;
					}
					else
					{
						this._CPTCodeID = default(int);
					}
					this.SendPropertyChanged("CPTCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestInvoice_Test_TestInvoice_Test_CPTCode", Storage="_TestInvoice_Test", ThisKey="TestInvoice_TestID", OtherKey="ID", IsForeignKey=true)]
		public TestInvoice_Test TestInvoice_Test
		{
			get
			{
				return this._TestInvoice_Test.Entity;
			}
			set
			{
				TestInvoice_Test previousValue = this._TestInvoice_Test.Entity;
				if (((previousValue != value) 
							|| (this._TestInvoice_Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestInvoice_Test.Entity = null;
						previousValue.TestInvoice_Test_CPTCodes.Remove(this);
					}
					this._TestInvoice_Test.Entity = value;
					if ((value != null))
					{
						value.TestInvoice_Test_CPTCodes.Add(this);
						this._TestInvoice_TestID = value.ID;
					}
					else
					{
						this._TestInvoice_TestID = default(int);
					}
					this.SendPropertyChanged("TestInvoice_Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestType")]
	public partial class TestType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<TestInvoice> _TestInvoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public TestType()
		{
			this._TestInvoices = new EntitySet<TestInvoice>(new Action<TestInvoice>(this.attach_TestInvoices), new Action<TestInvoice>(this.detach_TestInvoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestType_TestInvoice", Storage="_TestInvoices", ThisKey="ID", OtherKey="TestTypeID")]
		public EntitySet<TestInvoice> TestInvoices
		{
			get
			{
				return this._TestInvoices;
			}
			set
			{
				this._TestInvoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestInvoices(TestInvoice entity)
		{
			this.SendPropertyChanging();
			entity.TestType = this;
		}
		
		private void detach_TestInvoices(TestInvoice entity)
		{
			this.SendPropertyChanging();
			entity.TestType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPermissions")]
	public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _PermissionID;
		
		private bool _AllowView;
		
		private bool _AllowAdd;
		
		private bool _AllowEdit;
		
		private bool _AllowDelete;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnAllowViewChanging(bool value);
    partial void OnAllowViewChanged();
    partial void OnAllowAddChanging(bool value);
    partial void OnAllowAddChanged();
    partial void OnAllowEditChanging(bool value);
    partial void OnAllowEditChanged();
    partial void OnAllowDeleteChanging(bool value);
    partial void OnAllowDeleteChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public UserPermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL")]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowView", DbType="Bit NOT NULL")]
		public bool AllowView
		{
			get
			{
				return this._AllowView;
			}
			set
			{
				if ((this._AllowView != value))
				{
					this.OnAllowViewChanging(value);
					this.SendPropertyChanging();
					this._AllowView = value;
					this.SendPropertyChanged("AllowView");
					this.OnAllowViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowAdd", DbType="Bit NOT NULL")]
		public bool AllowAdd
		{
			get
			{
				return this._AllowAdd;
			}
			set
			{
				if ((this._AllowAdd != value))
				{
					this.OnAllowAddChanging(value);
					this.SendPropertyChanging();
					this._AllowAdd = value;
					this.SendPropertyChanged("AllowAdd");
					this.OnAllowAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowEdit", DbType="Bit NOT NULL")]
		public bool AllowEdit
		{
			get
			{
				return this._AllowEdit;
			}
			set
			{
				if ((this._AllowEdit != value))
				{
					this.OnAllowEditChanging(value);
					this.SendPropertyChanging();
					this._AllowEdit = value;
					this.SendPropertyChanged("AllowEdit");
					this.OnAllowEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowDelete", DbType="Bit NOT NULL")]
		public bool AllowDelete
		{
			get
			{
				return this._AllowDelete;
			}
			set
			{
				if ((this._AllowDelete != value))
				{
					this.OnAllowDeleteChanging(value);
					this.SendPropertyChanging();
					this._AllowDelete = value;
					this.SendPropertyChanged("AllowDelete");
					this.OnAllowDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UserPermission", Storage="_Permission", ThisKey="PermissionID", OtherKey="ID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._PermissionID = value.ID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermission", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttorneyTerms")]
	public partial class AttorneyTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AttorneyID;
		
		private int _LoanTermsMonths;
		
		private decimal _YearlyInterest;
		
		private int _ServiceFeeWaivedMonths;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<int> _TermType;
		
		private string _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAttorneyIDChanging(int value);
    partial void OnAttorneyIDChanged();
    partial void OnLoanTermsMonthsChanging(int value);
    partial void OnLoanTermsMonthsChanged();
    partial void OnYearlyInterestChanging(decimal value);
    partial void OnYearlyInterestChanged();
    partial void OnServiceFeeWaivedMonthsChanging(int value);
    partial void OnServiceFeeWaivedMonthsChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnTermTypeChanging(System.Nullable<int> value);
    partial void OnTermTypeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public AttorneyTerm()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttorneyID", DbType="Int NOT NULL")]
		public int AttorneyID
		{
			get
			{
				return this._AttorneyID;
			}
			set
			{
				if ((this._AttorneyID != value))
				{
					this.OnAttorneyIDChanging(value);
					this.SendPropertyChanging();
					this._AttorneyID = value;
					this.SendPropertyChanged("AttorneyID");
					this.OnAttorneyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanTermsMonths", DbType="Int NOT NULL")]
		public int LoanTermsMonths
		{
			get
			{
				return this._LoanTermsMonths;
			}
			set
			{
				if ((this._LoanTermsMonths != value))
				{
					this.OnLoanTermsMonthsChanging(value);
					this.SendPropertyChanging();
					this._LoanTermsMonths = value;
					this.SendPropertyChanged("LoanTermsMonths");
					this.OnLoanTermsMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearlyInterest", DbType="Decimal(18,4) NOT NULL")]
		public decimal YearlyInterest
		{
			get
			{
				return this._YearlyInterest;
			}
			set
			{
				if ((this._YearlyInterest != value))
				{
					this.OnYearlyInterestChanging(value);
					this.SendPropertyChanging();
					this._YearlyInterest = value;
					this.SendPropertyChanged("YearlyInterest");
					this.OnYearlyInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFeeWaivedMonths", DbType="Int NOT NULL")]
		public int ServiceFeeWaivedMonths
		{
			get
			{
				return this._ServiceFeeWaivedMonths;
			}
			set
			{
				if ((this._ServiceFeeWaivedMonths != value))
				{
					this.OnServiceFeeWaivedMonthsChanging(value);
					this.SendPropertyChanging();
					this._ServiceFeeWaivedMonths = value;
					this.SendPropertyChanged("ServiceFeeWaivedMonths");
					this.OnServiceFeeWaivedMonthsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermType", DbType="Int")]
		public System.Nullable<int> TermType
		{
			get
			{
				return this._TermType;
			}
			set
			{
				if ((this._TermType != value))
				{
					this.OnTermTypeChanging(value);
					this.SendPropertyChanging();
					this._TermType = value;
					this.SendPropertyChanged("TermType");
					this.OnTermTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(15)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ICDCodes")]
	public partial class ICDCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ShortDescription;
		
		private string _LongDescription;
		
		private string _ICDVersion;
		
		private bool _Active;
		
		private int _CompanyID;
		
		private string _Code;
		
		private EntitySet<SurgeryInvoice_Surgery_ICDCode> _SurgeryInvoice_Surgery_ICDCodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnICDVersionChanging(string value);
    partial void OnICDVersionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public ICDCode()
		{
			this._SurgeryInvoice_Surgery_ICDCodes = new EntitySet<SurgeryInvoice_Surgery_ICDCode>(new Action<SurgeryInvoice_Surgery_ICDCode>(this.attach_SurgeryInvoice_Surgery_ICDCodes), new Action<SurgeryInvoice_Surgery_ICDCode>(this.detach_SurgeryInvoice_Surgery_ICDCodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDVersion", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ICDVersion
		{
			get
			{
				return this._ICDVersion;
			}
			set
			{
				if ((this._ICDVersion != value))
				{
					this.OnICDVersionChanging(value);
					this.SendPropertyChanging();
					this._ICDVersion = value;
					this.SendPropertyChanged("ICDVersion");
					this.OnICDVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICDCode_SurgeryInvoice_Surgery_ICDCode", Storage="_SurgeryInvoice_Surgery_ICDCodes", ThisKey="ID", OtherKey="ICDCodeID")]
		public EntitySet<SurgeryInvoice_Surgery_ICDCode> SurgeryInvoice_Surgery_ICDCodes
		{
			get
			{
				return this._SurgeryInvoice_Surgery_ICDCodes;
			}
			set
			{
				this._SurgeryInvoice_Surgery_ICDCodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SurgeryInvoice_Surgery_ICDCodes(SurgeryInvoice_Surgery_ICDCode entity)
		{
			this.SendPropertyChanging();
			entity.ICDCode = this;
		}
		
		private void detach_SurgeryInvoice_Surgery_ICDCodes(SurgeryInvoice_Surgery_ICDCode entity)
		{
			this.SendPropertyChanging();
			entity.ICDCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SurgeryInvoice_Surgery_ICDCodes")]
	public partial class SurgeryInvoice_Surgery_ICDCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SurgeryInvoice_SurgeryID;
		
		private int _ICDCodeID;
		
		private System.Nullable<decimal> _Amount;
		
		private string _Description;
		
		private bool _Active;
		
		private System.DateTime _DateAdded;
		
		private int _Temp_CompanyID;
		
		private EntityRef<ICDCode> _ICDCode;
		
		private EntityRef<SurgeryInvoice_Surgery> _SurgeryInvoice_Surgery;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurgeryInvoice_SurgeryIDChanging(int value);
    partial void OnSurgeryInvoice_SurgeryIDChanged();
    partial void OnICDCodeIDChanging(int value);
    partial void OnICDCodeIDChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnTemp_CompanyIDChanging(int value);
    partial void OnTemp_CompanyIDChanged();
    #endregion
		
		public SurgeryInvoice_Surgery_ICDCode()
		{
			this._ICDCode = default(EntityRef<ICDCode>);
			this._SurgeryInvoice_Surgery = default(EntityRef<SurgeryInvoice_Surgery>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgeryInvoice_SurgeryID", DbType="Int NOT NULL")]
		public int SurgeryInvoice_SurgeryID
		{
			get
			{
				return this._SurgeryInvoice_SurgeryID;
			}
			set
			{
				if ((this._SurgeryInvoice_SurgeryID != value))
				{
					if (this._SurgeryInvoice_Surgery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurgeryInvoice_SurgeryIDChanging(value);
					this.SendPropertyChanging();
					this._SurgeryInvoice_SurgeryID = value;
					this.SendPropertyChanged("SurgeryInvoice_SurgeryID");
					this.OnSurgeryInvoice_SurgeryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDCodeID", DbType="Int NOT NULL")]
		public int ICDCodeID
		{
			get
			{
				return this._ICDCodeID;
			}
			set
			{
				if ((this._ICDCodeID != value))
				{
					if (this._ICDCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnICDCodeIDChanging(value);
					this.SendPropertyChanging();
					this._ICDCodeID = value;
					this.SendPropertyChanged("ICDCodeID");
					this.OnICDCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp_CompanyID", DbType="Int NOT NULL")]
		public int Temp_CompanyID
		{
			get
			{
				return this._Temp_CompanyID;
			}
			set
			{
				if ((this._Temp_CompanyID != value))
				{
					this.OnTemp_CompanyIDChanging(value);
					this.SendPropertyChanging();
					this._Temp_CompanyID = value;
					this.SendPropertyChanged("Temp_CompanyID");
					this.OnTemp_CompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICDCode_SurgeryInvoice_Surgery_ICDCode", Storage="_ICDCode", ThisKey="ICDCodeID", OtherKey="ID", IsForeignKey=true)]
		public ICDCode ICDCode
		{
			get
			{
				return this._ICDCode.Entity;
			}
			set
			{
				ICDCode previousValue = this._ICDCode.Entity;
				if (((previousValue != value) 
							|| (this._ICDCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ICDCode.Entity = null;
						previousValue.SurgeryInvoice_Surgery_ICDCodes.Remove(this);
					}
					this._ICDCode.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Surgery_ICDCodes.Add(this);
						this._ICDCodeID = value.ID;
					}
					else
					{
						this._ICDCodeID = default(int);
					}
					this.SendPropertyChanged("ICDCode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SurgeryInvoice_Surgery_SurgeryInvoice_Surgery_ICDCode", Storage="_SurgeryInvoice_Surgery", ThisKey="SurgeryInvoice_SurgeryID", OtherKey="ID", IsForeignKey=true)]
		public SurgeryInvoice_Surgery SurgeryInvoice_Surgery
		{
			get
			{
				return this._SurgeryInvoice_Surgery.Entity;
			}
			set
			{
				SurgeryInvoice_Surgery previousValue = this._SurgeryInvoice_Surgery.Entity;
				if (((previousValue != value) 
							|| (this._SurgeryInvoice_Surgery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SurgeryInvoice_Surgery.Entity = null;
						previousValue.SurgeryInvoice_Surgery_ICDCodes.Remove(this);
					}
					this._SurgeryInvoice_Surgery.Entity = value;
					if ((value != null))
					{
						value.SurgeryInvoice_Surgery_ICDCodes.Add(this);
						this._SurgeryInvoice_SurgeryID = value.ID;
					}
					else
					{
						this._SurgeryInvoice_SurgeryID = default(int);
					}
					this.SendPropertyChanged("SurgeryInvoice_Surgery");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class procGetGeneralStatisticsResult
	{
		
		private System.Nullable<int> _TotalTests;
		
		private System.Nullable<int> _TotalMRIs;
		
		private System.Nullable<int> _TotalSurgeries;
		
		private System.Nullable<decimal> _TotalAmountCollected;
		
		private System.Nullable<decimal> _TotalPaymentsMade;
		
		public procGetGeneralStatisticsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTests", DbType="Int")]
		public System.Nullable<int> TotalTests
		{
			get
			{
				return this._TotalTests;
			}
			set
			{
				if ((this._TotalTests != value))
				{
					this._TotalTests = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMRIs", DbType="Int")]
		public System.Nullable<int> TotalMRIs
		{
			get
			{
				return this._TotalMRIs;
			}
			set
			{
				if ((this._TotalMRIs != value))
				{
					this._TotalMRIs = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSurgeries", DbType="Int")]
		public System.Nullable<int> TotalSurgeries
		{
			get
			{
				return this._TotalSurgeries;
			}
			set
			{
				if ((this._TotalSurgeries != value))
				{
					this._TotalSurgeries = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmountCollected", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalAmountCollected
		{
			get
			{
				return this._TotalAmountCollected;
			}
			set
			{
				if ((this._TotalAmountCollected != value))
				{
					this._TotalAmountCollected = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPaymentsMade", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalPaymentsMade
		{
			get
			{
				return this._TotalPaymentsMade;
			}
			set
			{
				if ((this._TotalPaymentsMade != value))
				{
					this._TotalPaymentsMade = value;
				}
			}
		}
	}
	
	public partial class procGetTestInvoiceSummaryResult
	{
		
		private System.Nullable<int> _InvoiceID;
		
		private System.Nullable<System.DateTime> _DateServiceFeeBegins;
		
		private System.Nullable<System.DateTime> _MaturityDate;
		
		private System.Nullable<System.DateTime> _AmortizationDate;
		
		private System.Nullable<decimal> _TotalTestCost_Minus_PPODiscount;
		
		private System.Nullable<decimal> _TotalPPODiscount;
		
		private System.Nullable<decimal> _CostOfTests_Before_PPODiscount;
		
		private System.Nullable<decimal> _Principal_Deposits_Paid;
		
		private System.Nullable<decimal> _ServiceFeeReceived;
		
		private System.Nullable<decimal> _AdditionalDeductions;
		
		private System.Nullable<decimal> _BalanceDue;
		
		private System.Nullable<decimal> _CumulativeServiceFeeDue;
		
		private System.Nullable<decimal> _EndingBalance;
		
		private System.Nullable<decimal> _CostOfGoodsSold;
		
		private System.Nullable<decimal> _TotalRevenue;
		
		private System.Nullable<decimal> _TotalCPTs;
		
		private System.Nullable<decimal> _TotalPrincipal;
		
		private System.Nullable<decimal> _TotalDeposits;
		
		public procGetTestInvoiceSummaryResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="Int")]
		public System.Nullable<int> InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					this._InvoiceID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateServiceFeeBegins", DbType="Date")]
		public System.Nullable<System.DateTime> DateServiceFeeBegins
		{
			get
			{
				return this._DateServiceFeeBegins;
			}
			set
			{
				if ((this._DateServiceFeeBegins != value))
				{
					this._DateServiceFeeBegins = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaturityDate", DbType="Date")]
		public System.Nullable<System.DateTime> MaturityDate
		{
			get
			{
				return this._MaturityDate;
			}
			set
			{
				if ((this._MaturityDate != value))
				{
					this._MaturityDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationDate", DbType="Date")]
		public System.Nullable<System.DateTime> AmortizationDate
		{
			get
			{
				return this._AmortizationDate;
			}
			set
			{
				if ((this._AmortizationDate != value))
				{
					this._AmortizationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTestCost_Minus_PPODiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalTestCost_Minus_PPODiscount
		{
			get
			{
				return this._TotalTestCost_Minus_PPODiscount;
			}
			set
			{
				if ((this._TotalTestCost_Minus_PPODiscount != value))
				{
					this._TotalTestCost_Minus_PPODiscount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPPODiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalPPODiscount
		{
			get
			{
				return this._TotalPPODiscount;
			}
			set
			{
				if ((this._TotalPPODiscount != value))
				{
					this._TotalPPODiscount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfTests_Before_PPODiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CostOfTests_Before_PPODiscount
		{
			get
			{
				return this._CostOfTests_Before_PPODiscount;
			}
			set
			{
				if ((this._CostOfTests_Before_PPODiscount != value))
				{
					this._CostOfTests_Before_PPODiscount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Principal_Deposits_Paid", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Principal_Deposits_Paid
		{
			get
			{
				return this._Principal_Deposits_Paid;
			}
			set
			{
				if ((this._Principal_Deposits_Paid != value))
				{
					this._Principal_Deposits_Paid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFeeReceived", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ServiceFeeReceived
		{
			get
			{
				return this._ServiceFeeReceived;
			}
			set
			{
				if ((this._ServiceFeeReceived != value))
				{
					this._ServiceFeeReceived = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalDeductions", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AdditionalDeductions
		{
			get
			{
				return this._AdditionalDeductions;
			}
			set
			{
				if ((this._AdditionalDeductions != value))
				{
					this._AdditionalDeductions = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceDue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> BalanceDue
		{
			get
			{
				return this._BalanceDue;
			}
			set
			{
				if ((this._BalanceDue != value))
				{
					this._BalanceDue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CumulativeServiceFeeDue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CumulativeServiceFeeDue
		{
			get
			{
				return this._CumulativeServiceFeeDue;
			}
			set
			{
				if ((this._CumulativeServiceFeeDue != value))
				{
					this._CumulativeServiceFeeDue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingBalance", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> EndingBalance
		{
			get
			{
				return this._EndingBalance;
			}
			set
			{
				if ((this._EndingBalance != value))
				{
					this._EndingBalance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfGoodsSold", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CostOfGoodsSold
		{
			get
			{
				return this._CostOfGoodsSold;
			}
			set
			{
				if ((this._CostOfGoodsSold != value))
				{
					this._CostOfGoodsSold = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalRevenue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalRevenue
		{
			get
			{
				return this._TotalRevenue;
			}
			set
			{
				if ((this._TotalRevenue != value))
				{
					this._TotalRevenue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCPTs", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalCPTs
		{
			get
			{
				return this._TotalCPTs;
			}
			set
			{
				if ((this._TotalCPTs != value))
				{
					this._TotalCPTs = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrincipal", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalPrincipal
		{
			get
			{
				return this._TotalPrincipal;
			}
			set
			{
				if ((this._TotalPrincipal != value))
				{
					this._TotalPrincipal = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDeposits", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalDeposits
		{
			get
			{
				return this._TotalDeposits;
			}
			set
			{
				if ((this._TotalDeposits != value))
				{
					this._TotalDeposits = value;
				}
			}
		}
	}
	
	public partial class procGetSurgeryInvoiceSummaryResult
	{
		
		private System.Nullable<int> _InvoiceID;
		
		private System.Nullable<System.DateTime> _DateServiceFeeBegins;
		
		private System.Nullable<System.DateTime> _MaturityDate;
		
		private System.Nullable<System.DateTime> _AmortizationDate;
		
		private System.Nullable<decimal> _TotalCost_Minus_PPODiscount;
		
		private System.Nullable<decimal> _TotalPPODiscount;
		
		private System.Nullable<decimal> _Cost_Before_PPODiscount;
		
		private System.Nullable<decimal> _Principal_Deposits_Paid;
		
		private System.Nullable<decimal> _ServiceFeeReceived;
		
		private System.Nullable<decimal> _AdditionalDeductions;
		
		private System.Nullable<decimal> _BalanceDue;
		
		private System.Nullable<decimal> _CumulativeServiceFeeDue;
		
		private System.Nullable<decimal> _EndingBalance;
		
		private System.Nullable<decimal> _CostOfGoodsSold;
		
		private System.Nullable<decimal> _TotalRevenue;
		
		private System.Nullable<decimal> _TotalCPTs;
		
		private System.Nullable<decimal> _TotalPrincipal;
		
		private System.Nullable<decimal> _TotalDeposits;
		
		public procGetSurgeryInvoiceSummaryResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="Int")]
		public System.Nullable<int> InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					this._InvoiceID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateServiceFeeBegins", DbType="Date")]
		public System.Nullable<System.DateTime> DateServiceFeeBegins
		{
			get
			{
				return this._DateServiceFeeBegins;
			}
			set
			{
				if ((this._DateServiceFeeBegins != value))
				{
					this._DateServiceFeeBegins = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaturityDate", DbType="Date")]
		public System.Nullable<System.DateTime> MaturityDate
		{
			get
			{
				return this._MaturityDate;
			}
			set
			{
				if ((this._MaturityDate != value))
				{
					this._MaturityDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmortizationDate", DbType="Date")]
		public System.Nullable<System.DateTime> AmortizationDate
		{
			get
			{
				return this._AmortizationDate;
			}
			set
			{
				if ((this._AmortizationDate != value))
				{
					this._AmortizationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost_Minus_PPODiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalCost_Minus_PPODiscount
		{
			get
			{
				return this._TotalCost_Minus_PPODiscount;
			}
			set
			{
				if ((this._TotalCost_Minus_PPODiscount != value))
				{
					this._TotalCost_Minus_PPODiscount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPPODiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalPPODiscount
		{
			get
			{
				return this._TotalPPODiscount;
			}
			set
			{
				if ((this._TotalPPODiscount != value))
				{
					this._TotalPPODiscount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost_Before_PPODiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Cost_Before_PPODiscount
		{
			get
			{
				return this._Cost_Before_PPODiscount;
			}
			set
			{
				if ((this._Cost_Before_PPODiscount != value))
				{
					this._Cost_Before_PPODiscount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Principal_Deposits_Paid", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Principal_Deposits_Paid
		{
			get
			{
				return this._Principal_Deposits_Paid;
			}
			set
			{
				if ((this._Principal_Deposits_Paid != value))
				{
					this._Principal_Deposits_Paid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFeeReceived", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ServiceFeeReceived
		{
			get
			{
				return this._ServiceFeeReceived;
			}
			set
			{
				if ((this._ServiceFeeReceived != value))
				{
					this._ServiceFeeReceived = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalDeductions", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AdditionalDeductions
		{
			get
			{
				return this._AdditionalDeductions;
			}
			set
			{
				if ((this._AdditionalDeductions != value))
				{
					this._AdditionalDeductions = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceDue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> BalanceDue
		{
			get
			{
				return this._BalanceDue;
			}
			set
			{
				if ((this._BalanceDue != value))
				{
					this._BalanceDue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CumulativeServiceFeeDue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CumulativeServiceFeeDue
		{
			get
			{
				return this._CumulativeServiceFeeDue;
			}
			set
			{
				if ((this._CumulativeServiceFeeDue != value))
				{
					this._CumulativeServiceFeeDue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingBalance", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> EndingBalance
		{
			get
			{
				return this._EndingBalance;
			}
			set
			{
				if ((this._EndingBalance != value))
				{
					this._EndingBalance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfGoodsSold", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CostOfGoodsSold
		{
			get
			{
				return this._CostOfGoodsSold;
			}
			set
			{
				if ((this._CostOfGoodsSold != value))
				{
					this._CostOfGoodsSold = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalRevenue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalRevenue
		{
			get
			{
				return this._TotalRevenue;
			}
			set
			{
				if ((this._TotalRevenue != value))
				{
					this._TotalRevenue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCPTs", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalCPTs
		{
			get
			{
				return this._TotalCPTs;
			}
			set
			{
				if ((this._TotalCPTs != value))
				{
					this._TotalCPTs = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrincipal", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalPrincipal
		{
			get
			{
				return this._TotalPrincipal;
			}
			set
			{
				if ((this._TotalPrincipal != value))
				{
					this._TotalPrincipal = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDeposits", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalDeposits
		{
			get
			{
				return this._TotalDeposits;
			}
			set
			{
				if ((this._TotalDeposits != value))
				{
					this._TotalDeposits = value;
				}
			}
		}
	}
	
	public partial class procSearchInvoice_GetByFirstServiceDateResult
	{
		
		private int _ID;
		
		public procSearchInvoice_GetByFirstServiceDateResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
